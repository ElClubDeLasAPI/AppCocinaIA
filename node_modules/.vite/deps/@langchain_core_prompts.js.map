{
  "version": 3,
  "sources": ["../../@langchain/core/dist/prompts/pipeline.js", "../../@langchain/core/dist/prompts/structured.js"],
  "sourcesContent": ["import { BasePromptTemplate } from \"./base.js\";\r\nimport { ChatPromptTemplate } from \"./chat.js\";\r\n/**\r\n * Class that handles a sequence of prompts, each of which may require\r\n * different input variables. Includes methods for formatting these\r\n * prompts, extracting required input values, and handling partial\r\n * prompts.\r\n * @example\r\n * ```typescript\r\n * const composedPrompt = new PipelinePromptTemplate({\r\n *   pipelinePrompts: [\r\n *     {\r\n *       name: \"introduction\",\r\n *       prompt: PromptTemplate.fromTemplate(`You are impersonating {person}.`),\r\n *     },\r\n *     {\r\n *       name: \"example\",\r\n *       prompt: PromptTemplate.fromTemplate(\r\n *         `Here's an example of an interaction:\r\n * Q: {example_q}\r\n * A: {example_a}`,\r\n *       ),\r\n *     },\r\n *     {\r\n *       name: \"start\",\r\n *       prompt: PromptTemplate.fromTemplate(\r\n *         `Now, do this for real!\r\n * Q: {input}\r\n * A:`,\r\n *       ),\r\n *     },\r\n *   ],\r\n *   finalPrompt: PromptTemplate.fromTemplate(\r\n *     `{introduction}\r\n * {example}\r\n * {start}`,\r\n *   ),\r\n * });\r\n *\r\n * const formattedPrompt = await composedPrompt.format({\r\n *   person: \"Elon Musk\",\r\n *   example_q: `What's your favorite car?`,\r\n *   example_a: \"Tesla\",\r\n *   input: `What's your favorite social media site?`,\r\n * });\r\n * ```\r\n */\r\nexport class PipelinePromptTemplate extends BasePromptTemplate {\r\n    static lc_name() {\r\n        return \"PipelinePromptTemplate\";\r\n    }\r\n    constructor(input) {\r\n        super({ ...input, inputVariables: [] });\r\n        Object.defineProperty(this, \"pipelinePrompts\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"finalPrompt\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.pipelinePrompts = input.pipelinePrompts;\r\n        this.finalPrompt = input.finalPrompt;\r\n        this.inputVariables = this.computeInputValues();\r\n    }\r\n    /**\r\n     * Computes the input values required by the pipeline prompts.\r\n     * @returns Array of input values required by the pipeline prompts.\r\n     */\r\n    computeInputValues() {\r\n        const intermediateValues = this.pipelinePrompts.map((pipelinePrompt) => pipelinePrompt.name);\r\n        const inputValues = this.pipelinePrompts\r\n            .map((pipelinePrompt) => pipelinePrompt.prompt.inputVariables.filter((inputValue) => !intermediateValues.includes(inputValue)))\r\n            .flat();\r\n        return [...new Set(inputValues)];\r\n    }\r\n    static extractRequiredInputValues(allValues, requiredValueNames) {\r\n        return requiredValueNames.reduce((requiredValues, valueName) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            requiredValues[valueName] = allValues[valueName];\r\n            return requiredValues;\r\n        }, {});\r\n    }\r\n    /**\r\n     * Formats the pipeline prompts based on the provided input values.\r\n     * @param values Input values to format the pipeline prompts.\r\n     * @returns Promise that resolves with the formatted input values.\r\n     */\r\n    async formatPipelinePrompts(values) {\r\n        const allValues = await this.mergePartialAndUserVariables(values);\r\n        for (const { name: pipelinePromptName, prompt: pipelinePrompt } of this\r\n            .pipelinePrompts) {\r\n            const pipelinePromptInputValues = PipelinePromptTemplate.extractRequiredInputValues(allValues, pipelinePrompt.inputVariables);\r\n            // eslint-disable-next-line no-instanceof/no-instanceof\r\n            if (pipelinePrompt instanceof ChatPromptTemplate) {\r\n                allValues[pipelinePromptName] = await pipelinePrompt.formatMessages(pipelinePromptInputValues);\r\n            }\r\n            else {\r\n                allValues[pipelinePromptName] = await pipelinePrompt.format(pipelinePromptInputValues);\r\n            }\r\n        }\r\n        return PipelinePromptTemplate.extractRequiredInputValues(allValues, this.finalPrompt.inputVariables);\r\n    }\r\n    /**\r\n     * Formats the final prompt value based on the provided input values.\r\n     * @param values Input values to format the final prompt value.\r\n     * @returns Promise that resolves with the formatted final prompt value.\r\n     */\r\n    async formatPromptValue(values) {\r\n        return this.finalPrompt.formatPromptValue(await this.formatPipelinePrompts(values));\r\n    }\r\n    async format(values) {\r\n        return this.finalPrompt.format(await this.formatPipelinePrompts(values));\r\n    }\r\n    /**\r\n     * Handles partial prompts, which are prompts that have been partially\r\n     * filled with input values.\r\n     * @param values Partial input values.\r\n     * @returns Promise that resolves with a new PipelinePromptTemplate instance with updated input variables.\r\n     */\r\n    async partial(values) {\r\n        const promptDict = { ...this };\r\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\r\n        promptDict.partialVariables = {\r\n            ...(this.partialVariables ?? {}),\r\n            ...values,\r\n        };\r\n        return new PipelinePromptTemplate(promptDict);\r\n    }\r\n    serialize() {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    _getPromptType() {\r\n        return \"pipeline\";\r\n    }\r\n}\r\n", "import { ChatPromptTemplate, } from \"./chat.js\";\r\nfunction isWithStructuredOutput(x\r\n// eslint-disable-next-line @typescript-eslint/ban-types\r\n) {\r\n    return (typeof x === \"object\" &&\r\n        x != null &&\r\n        \"withStructuredOutput\" in x &&\r\n        typeof x.withStructuredOutput === \"function\");\r\n}\r\nfunction isRunnableBinding(x) {\r\n    return (typeof x === \"object\" &&\r\n        x != null &&\r\n        \"lc_id\" in x &&\r\n        Array.isArray(x.lc_id) &&\r\n        x.lc_id.join(\"/\") === \"langchain_core/runnables/RunnableBinding\");\r\n}\r\nexport class StructuredPrompt extends ChatPromptTemplate {\r\n    get lc_aliases() {\r\n        return {\r\n            ...super.lc_aliases,\r\n            schema: \"schema_\",\r\n        };\r\n    }\r\n    constructor(input) {\r\n        super(input);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        Object.defineProperty(this, \"schema\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain_core\", \"prompts\", \"structured\"]\r\n        });\r\n        this.schema = input.schema;\r\n    }\r\n    pipe(coerceable) {\r\n        if (isWithStructuredOutput(coerceable)) {\r\n            return super.pipe(coerceable.withStructuredOutput(this.schema));\r\n        }\r\n        if (isRunnableBinding(coerceable) &&\r\n            isWithStructuredOutput(coerceable.bound)) {\r\n            return super.pipe(coerceable.bound\r\n                .withStructuredOutput(this.schema)\r\n                .bind(coerceable.kwargs ?? {})\r\n                .withConfig(coerceable.config));\r\n        }\r\n        throw new Error(`Structured prompts need to be piped to a language model that supports the \"withStructuredOutput()\" method.`);\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    static fromMessagesAndSchema(promptMessages, schema\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        return StructuredPrompt.fromMessages(promptMessages, { schema });\r\n    }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CO,IAAM,yBAAN,MAAM,gCAA+B,mBAAmB;AAAA,EAC3D,OAAO,UAAU;AACb,WAAO;AAAA,EACX;AAAA,EACA,YAAY,OAAO;AACf,UAAM,EAAE,GAAG,OAAO,gBAAgB,CAAC,EAAE,CAAC;AACtC,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,SAAK,kBAAkB,MAAM;AAC7B,SAAK,cAAc,MAAM;AACzB,SAAK,iBAAiB,KAAK,mBAAmB;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB;AACjB,UAAM,qBAAqB,KAAK,gBAAgB,IAAI,CAAC,mBAAmB,eAAe,IAAI;AAC3F,UAAM,cAAc,KAAK,gBACpB,IAAI,CAAC,mBAAmB,eAAe,OAAO,eAAe,OAAO,CAAC,eAAe,CAAC,mBAAmB,SAAS,UAAU,CAAC,CAAC,EAC7H,KAAK;AACV,WAAO,CAAC,GAAG,IAAI,IAAI,WAAW,CAAC;AAAA,EACnC;AAAA,EACA,OAAO,2BAA2B,WAAW,oBAAoB;AAC7D,WAAO,mBAAmB,OAAO,CAAC,gBAAgB,cAAc;AAE5D,qBAAe,SAAS,IAAI,UAAU,SAAS;AAC/C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,sBAAsB,QAAQ;AAChC,UAAM,YAAY,MAAM,KAAK,6BAA6B,MAAM;AAChE,eAAW,EAAE,MAAM,oBAAoB,QAAQ,eAAe,KAAK,KAC9D,iBAAiB;AAClB,YAAM,4BAA4B,wBAAuB,2BAA2B,WAAW,eAAe,cAAc;AAE5H,UAAI,0BAA0B,oBAAoB;AAC9C,kBAAU,kBAAkB,IAAI,MAAM,eAAe,eAAe,yBAAyB;AAAA,MACjG,OACK;AACD,kBAAU,kBAAkB,IAAI,MAAM,eAAe,OAAO,yBAAyB;AAAA,MACzF;AAAA,IACJ;AACA,WAAO,wBAAuB,2BAA2B,WAAW,KAAK,YAAY,cAAc;AAAA,EACvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,kBAAkB,QAAQ;AAC5B,WAAO,KAAK,YAAY,kBAAkB,MAAM,KAAK,sBAAsB,MAAM,CAAC;AAAA,EACtF;AAAA,EACA,MAAM,OAAO,QAAQ;AACjB,WAAO,KAAK,YAAY,OAAO,MAAM,KAAK,sBAAsB,MAAM,CAAC;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,QAAQ,QAAQ;AAClB,UAAM,aAAa,EAAE,GAAG,KAAK;AAC7B,eAAW,iBAAiB,KAAK,eAAe,OAAO,CAAC,OAAO,EAAE,MAAM,OAAO;AAC9E,eAAW,mBAAmB;AAAA,MAC1B,GAAI,KAAK,oBAAoB,CAAC;AAAA,MAC9B,GAAG;AAAA,IACP;AACA,WAAO,IAAI,wBAAuB,UAAU;AAAA,EAChD;AAAA,EACA,YAAY;AACR,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACtC;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,EACX;AACJ;;;AC1IA,SAAS,uBAAuB,GAE9B;AACE,SAAQ,OAAO,MAAM,YACjB,KAAK,QACL,0BAA0B,KAC1B,OAAO,EAAE,yBAAyB;AAC1C;AACA,SAAS,kBAAkB,GAAG;AAC1B,SAAQ,OAAO,MAAM,YACjB,KAAK,QACL,WAAW,KACX,MAAM,QAAQ,EAAE,KAAK,KACrB,EAAE,MAAM,KAAK,GAAG,MAAM;AAC9B;AACO,IAAM,mBAAN,MAAM,0BAAyB,mBAAmB;AAAA,EACrD,IAAI,aAAa;AACb,WAAO;AAAA,MACH,GAAG,MAAM;AAAA,MACT,QAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,YAAY,OAAO;AACf,UAAM,KAAK;AAEX,WAAO,eAAe,MAAM,UAAU;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACX,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC,kBAAkB,WAAW,YAAY;AAAA,IACrD,CAAC;AACD,SAAK,SAAS,MAAM;AAAA,EACxB;AAAA,EACA,KAAK,YAAY;AACb,QAAI,uBAAuB,UAAU,GAAG;AACpC,aAAO,MAAM,KAAK,WAAW,qBAAqB,KAAK,MAAM,CAAC;AAAA,IAClE;AACA,QAAI,kBAAkB,UAAU,KAC5B,uBAAuB,WAAW,KAAK,GAAG;AAC1C,aAAO,MAAM,KAAK,WAAW,MACxB,qBAAqB,KAAK,MAAM,EAChC,KAAK,WAAW,UAAU,CAAC,CAAC,EAC5B,WAAW,WAAW,MAAM,CAAC;AAAA,IACtC;AACA,UAAM,IAAI,MAAM,4GAA4G;AAAA,EAChI;AAAA;AAAA,EAEA,OAAO,sBAAsB,gBAAgB,QAE3C;AACE,WAAO,kBAAiB,aAAa,gBAAgB,EAAE,OAAO,CAAC;AAAA,EACnE;AACJ;",
  "names": []
}
