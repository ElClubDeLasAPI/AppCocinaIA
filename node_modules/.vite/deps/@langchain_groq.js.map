{
  "version": 3,
  "sources": ["../../base64-js/index.js", "../../@langchain/core/dist/utils/js-sha1/hash.js", "../../@langchain/core/dist/caches/base.js", "../../js-tiktoken/dist/chunk-YVJR5WRT.js", "../../@langchain/core/dist/utils/tiktoken.js", "../../@langchain/core/dist/language_models/base.js", "../../@langchain/core/dist/utils/types/is_zod_schema.js", "../../@langchain/core/dist/language_models/chat_models.js", "../../groq-sdk/src/version.ts", "../../groq-sdk/src/_shims/registry.ts", "../../groq-sdk/src/_shims/MultipartBody.ts", "../../groq-sdk/src/_shims/web-runtime.ts", "../../groq-sdk/_shims/index.mjs", "../../groq-sdk/src/error.ts", "../../groq-sdk/src/lib/streaming.ts", "../../groq-sdk/src/uploads.ts", "../../groq-sdk/src/core.ts", "../../groq-sdk/src/resource.ts", "../../groq-sdk/src/resources/audio/transcriptions.ts", "../../groq-sdk/src/resources/audio/translations.ts", "../../groq-sdk/src/resources/audio/audio.ts", "../../groq-sdk/src/resources/chat/completions.ts", "../../groq-sdk/src/resources/chat/chat.ts", "../../groq-sdk/src/resources/completions.ts", "../../groq-sdk/src/resources/embeddings.ts", "../../groq-sdk/src/resources/models.ts", "../../groq-sdk/src/index.ts", "../../@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js", "../../@langchain/core/dist/utils/function_calling.js", "../../@langchain/groq/dist/chat_models.js"],
  "sourcesContent": ["'use strict'\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n  lookup[i] = code[i]\r\n  revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n  var len = b64.length\r\n\r\n  if (len % 4 > 0) {\r\n    throw new Error('Invalid string. Length must be a multiple of 4')\r\n  }\r\n\r\n  // Trim off extra bytes after placeholder bytes are found\r\n  // See: https://github.com/beatgammit/base64-js/issues/42\r\n  var validLen = b64.indexOf('=')\r\n  if (validLen === -1) validLen = len\r\n\r\n  var placeHoldersLen = validLen === len\r\n    ? 0\r\n    : 4 - (validLen % 4)\r\n\r\n  return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n  var tmp\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n\r\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n  var curByte = 0\r\n\r\n  // if there are placeholders, only get up to the last complete 4 chars\r\n  var len = placeHoldersLen > 0\r\n    ? validLen - 4\r\n    : validLen\r\n\r\n  var i\r\n  for (i = 0; i < len; i += 4) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 18) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n      revLookup[b64.charCodeAt(i + 3)]\r\n    arr[curByte++] = (tmp >> 16) & 0xFF\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 2) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 2) |\r\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 1) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 10) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n  return lookup[num >> 18 & 0x3F] +\r\n    lookup[num >> 12 & 0x3F] +\r\n    lookup[num >> 6 & 0x3F] +\r\n    lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n  var tmp\r\n  var output = []\r\n  for (var i = start; i < end; i += 3) {\r\n    tmp =\r\n      ((uint8[i] << 16) & 0xFF0000) +\r\n      ((uint8[i + 1] << 8) & 0xFF00) +\r\n      (uint8[i + 2] & 0xFF)\r\n    output.push(tripletToBase64(tmp))\r\n  }\r\n  return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n  var tmp\r\n  var len = uint8.length\r\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n  var parts = []\r\n  var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n  // go through the array every three bytes, we'll deal with trailing stuff later\r\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\r\n  }\r\n\r\n  // pad the end with zeros, but make sure to not forget the extra bytes\r\n  if (extraBytes === 1) {\r\n    tmp = uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 2] +\r\n      lookup[(tmp << 4) & 0x3F] +\r\n      '=='\r\n    )\r\n  } else if (extraBytes === 2) {\r\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 10] +\r\n      lookup[(tmp >> 4) & 0x3F] +\r\n      lookup[(tmp << 2) & 0x3F] +\r\n      '='\r\n    )\r\n  }\r\n\r\n  return parts.join('')\r\n}\r\n", "// @ts-nocheck\r\n// Inlined to deal with portability issues with importing crypto module\r\n/*\r\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\r\n *\r\n * @version 0.6.0\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\n\"use strict\";\r\nvar root = typeof window === \"object\" ? window : {};\r\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\r\nvar EXTRA = [-2147483648, 8388608, 32768, 128];\r\nvar SHIFT = [24, 16, 8, 0];\r\nvar OUTPUT_TYPES = [\"hex\", \"array\", \"digest\", \"arrayBuffer\"];\r\nvar blocks = [];\r\nfunction Sha1(sharedMemory) {\r\n    if (sharedMemory) {\r\n        blocks[0] =\r\n            blocks[16] =\r\n                blocks[1] =\r\n                    blocks[2] =\r\n                        blocks[3] =\r\n                            blocks[4] =\r\n                                blocks[5] =\r\n                                    blocks[6] =\r\n                                        blocks[7] =\r\n                                            blocks[8] =\r\n                                                blocks[9] =\r\n                                                    blocks[10] =\r\n                                                        blocks[11] =\r\n                                                            blocks[12] =\r\n                                                                blocks[13] =\r\n                                                                    blocks[14] =\r\n                                                                        blocks[15] =\r\n                                                                            0;\r\n        this.blocks = blocks;\r\n    }\r\n    else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n    this.h0 = 0x67452301;\r\n    this.h1 = 0xefcdab89;\r\n    this.h2 = 0x98badcfe;\r\n    this.h3 = 0x10325476;\r\n    this.h4 = 0xc3d2e1f0;\r\n    this.block = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n}\r\nSha1.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n        return;\r\n    }\r\n    var notString = typeof message !== \"string\";\r\n    if (notString && message.constructor === root.ArrayBuffer) {\r\n        message = new Uint8Array(message);\r\n    }\r\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\r\n    while (index < length) {\r\n        if (this.hashed) {\r\n            this.hashed = false;\r\n            blocks[0] = this.block;\r\n            blocks[16] =\r\n                blocks[1] =\r\n                    blocks[2] =\r\n                        blocks[3] =\r\n                            blocks[4] =\r\n                                blocks[5] =\r\n                                    blocks[6] =\r\n                                        blocks[7] =\r\n                                            blocks[8] =\r\n                                                blocks[9] =\r\n                                                    blocks[10] =\r\n                                                        blocks[11] =\r\n                                                            blocks[12] =\r\n                                                                blocks[13] =\r\n                                                                    blocks[14] =\r\n                                                                        blocks[15] =\r\n                                                                            0;\r\n        }\r\n        if (notString) {\r\n            for (i = this.start; index < length && i < 64; ++index) {\r\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n            }\r\n        }\r\n        else {\r\n            for (i = this.start; index < length && i < 64; ++index) {\r\n                code = message.charCodeAt(index);\r\n                if (code < 0x80) {\r\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n                }\r\n                else if (code < 0x800) {\r\n                    blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n                else if (code < 0xd800 || code >= 0xe000) {\r\n                    blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n                else {\r\n                    code =\r\n                        0x10000 +\r\n                            (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n                    blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n                    blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n                }\r\n            }\r\n        }\r\n        this.lastByteIndex = i;\r\n        this.bytes += i - this.start;\r\n        if (i >= 64) {\r\n            this.block = blocks[16];\r\n            this.start = i - 64;\r\n            this.hash();\r\n            this.hashed = true;\r\n        }\r\n        else {\r\n            this.start = i;\r\n        }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n        this.hBytes += (this.bytes / 4294967296) << 0;\r\n        this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n};\r\nSha1.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n        return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[16] = this.block;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    this.block = blocks[16];\r\n    if (i >= 56) {\r\n        if (!this.hashed) {\r\n            this.hash();\r\n        }\r\n        blocks[0] = this.block;\r\n        blocks[16] =\r\n            blocks[1] =\r\n                blocks[2] =\r\n                    blocks[3] =\r\n                        blocks[4] =\r\n                            blocks[5] =\r\n                                blocks[6] =\r\n                                    blocks[7] =\r\n                                        blocks[8] =\r\n                                            blocks[9] =\r\n                                                blocks[10] =\r\n                                                    blocks[11] =\r\n                                                        blocks[12] =\r\n                                                            blocks[13] =\r\n                                                                blocks[14] =\r\n                                                                    blocks[15] =\r\n                                                                        0;\r\n    }\r\n    blocks[14] = (this.hBytes << 3) | (this.bytes >>> 29);\r\n    blocks[15] = this.bytes << 3;\r\n    this.hash();\r\n};\r\nSha1.prototype.hash = function () {\r\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\r\n    var f, j, t, blocks = this.blocks;\r\n    for (j = 16; j < 80; ++j) {\r\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\r\n        blocks[j] = (t << 1) | (t >>> 31);\r\n    }\r\n    for (j = 0; j < 20; j += 5) {\r\n        f = (b & c) | (~b & d);\r\n        t = (a << 5) | (a >>> 27);\r\n        e = (t + f + e + 1518500249 + blocks[j]) << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n        f = (a & b) | (~a & c);\r\n        t = (e << 5) | (e >>> 27);\r\n        d = (t + f + d + 1518500249 + blocks[j + 1]) << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n        f = (e & a) | (~e & b);\r\n        t = (d << 5) | (d >>> 27);\r\n        c = (t + f + c + 1518500249 + blocks[j + 2]) << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n        f = (d & e) | (~d & a);\r\n        t = (c << 5) | (c >>> 27);\r\n        b = (t + f + b + 1518500249 + blocks[j + 3]) << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n        f = (c & d) | (~c & e);\r\n        t = (b << 5) | (b >>> 27);\r\n        a = (t + f + a + 1518500249 + blocks[j + 4]) << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n    }\r\n    for (; j < 40; j += 5) {\r\n        f = b ^ c ^ d;\r\n        t = (a << 5) | (a >>> 27);\r\n        e = (t + f + e + 1859775393 + blocks[j]) << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n        f = a ^ b ^ c;\r\n        t = (e << 5) | (e >>> 27);\r\n        d = (t + f + d + 1859775393 + blocks[j + 1]) << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n        f = e ^ a ^ b;\r\n        t = (d << 5) | (d >>> 27);\r\n        c = (t + f + c + 1859775393 + blocks[j + 2]) << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n        f = d ^ e ^ a;\r\n        t = (c << 5) | (c >>> 27);\r\n        b = (t + f + b + 1859775393 + blocks[j + 3]) << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n        f = c ^ d ^ e;\r\n        t = (b << 5) | (b >>> 27);\r\n        a = (t + f + a + 1859775393 + blocks[j + 4]) << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n    }\r\n    for (; j < 60; j += 5) {\r\n        f = (b & c) | (b & d) | (c & d);\r\n        t = (a << 5) | (a >>> 27);\r\n        e = (t + f + e - 1894007588 + blocks[j]) << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n        f = (a & b) | (a & c) | (b & c);\r\n        t = (e << 5) | (e >>> 27);\r\n        d = (t + f + d - 1894007588 + blocks[j + 1]) << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n        f = (e & a) | (e & b) | (a & b);\r\n        t = (d << 5) | (d >>> 27);\r\n        c = (t + f + c - 1894007588 + blocks[j + 2]) << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n        f = (d & e) | (d & a) | (e & a);\r\n        t = (c << 5) | (c >>> 27);\r\n        b = (t + f + b - 1894007588 + blocks[j + 3]) << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n        f = (c & d) | (c & e) | (d & e);\r\n        t = (b << 5) | (b >>> 27);\r\n        a = (t + f + a - 1894007588 + blocks[j + 4]) << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n    }\r\n    for (; j < 80; j += 5) {\r\n        f = b ^ c ^ d;\r\n        t = (a << 5) | (a >>> 27);\r\n        e = (t + f + e - 899497514 + blocks[j]) << 0;\r\n        b = (b << 30) | (b >>> 2);\r\n        f = a ^ b ^ c;\r\n        t = (e << 5) | (e >>> 27);\r\n        d = (t + f + d - 899497514 + blocks[j + 1]) << 0;\r\n        a = (a << 30) | (a >>> 2);\r\n        f = e ^ a ^ b;\r\n        t = (d << 5) | (d >>> 27);\r\n        c = (t + f + c - 899497514 + blocks[j + 2]) << 0;\r\n        e = (e << 30) | (e >>> 2);\r\n        f = d ^ e ^ a;\r\n        t = (c << 5) | (c >>> 27);\r\n        b = (t + f + b - 899497514 + blocks[j + 3]) << 0;\r\n        d = (d << 30) | (d >>> 2);\r\n        f = c ^ d ^ e;\r\n        t = (b << 5) | (b >>> 27);\r\n        a = (t + f + a - 899497514 + blocks[j + 4]) << 0;\r\n        c = (c << 30) | (c >>> 2);\r\n    }\r\n    this.h0 = (this.h0 + a) << 0;\r\n    this.h1 = (this.h1 + b) << 0;\r\n    this.h2 = (this.h2 + c) << 0;\r\n    this.h3 = (this.h3 + d) << 0;\r\n    this.h4 = (this.h4 + e) << 0;\r\n};\r\nSha1.prototype.hex = function () {\r\n    this.finalize();\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\r\n    return (HEX_CHARS[(h0 >> 28) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 24) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 20) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 16) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 12) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 8) & 0x0f] +\r\n        HEX_CHARS[(h0 >> 4) & 0x0f] +\r\n        HEX_CHARS[h0 & 0x0f] +\r\n        HEX_CHARS[(h1 >> 28) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 24) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 20) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 16) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 12) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 8) & 0x0f] +\r\n        HEX_CHARS[(h1 >> 4) & 0x0f] +\r\n        HEX_CHARS[h1 & 0x0f] +\r\n        HEX_CHARS[(h2 >> 28) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 24) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 20) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 16) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 12) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 8) & 0x0f] +\r\n        HEX_CHARS[(h2 >> 4) & 0x0f] +\r\n        HEX_CHARS[h2 & 0x0f] +\r\n        HEX_CHARS[(h3 >> 28) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 24) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 20) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 16) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 12) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 8) & 0x0f] +\r\n        HEX_CHARS[(h3 >> 4) & 0x0f] +\r\n        HEX_CHARS[h3 & 0x0f] +\r\n        HEX_CHARS[(h4 >> 28) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 24) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 20) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 16) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 12) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 8) & 0x0f] +\r\n        HEX_CHARS[(h4 >> 4) & 0x0f] +\r\n        HEX_CHARS[h4 & 0x0f]);\r\n};\r\nSha1.prototype.toString = Sha1.prototype.hex;\r\nSha1.prototype.digest = function () {\r\n    this.finalize();\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\r\n    return [\r\n        (h0 >> 24) & 0xff,\r\n        (h0 >> 16) & 0xff,\r\n        (h0 >> 8) & 0xff,\r\n        h0 & 0xff,\r\n        (h1 >> 24) & 0xff,\r\n        (h1 >> 16) & 0xff,\r\n        (h1 >> 8) & 0xff,\r\n        h1 & 0xff,\r\n        (h2 >> 24) & 0xff,\r\n        (h2 >> 16) & 0xff,\r\n        (h2 >> 8) & 0xff,\r\n        h2 & 0xff,\r\n        (h3 >> 24) & 0xff,\r\n        (h3 >> 16) & 0xff,\r\n        (h3 >> 8) & 0xff,\r\n        h3 & 0xff,\r\n        (h4 >> 24) & 0xff,\r\n        (h4 >> 16) & 0xff,\r\n        (h4 >> 8) & 0xff,\r\n        h4 & 0xff,\r\n    ];\r\n};\r\nSha1.prototype.array = Sha1.prototype.digest;\r\nSha1.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n    var buffer = new ArrayBuffer(20);\r\n    var dataView = new DataView(buffer);\r\n    dataView.setUint32(0, this.h0);\r\n    dataView.setUint32(4, this.h1);\r\n    dataView.setUint32(8, this.h2);\r\n    dataView.setUint32(12, this.h3);\r\n    dataView.setUint32(16, this.h4);\r\n    return buffer;\r\n};\r\nexport const insecureHash = (message) => {\r\n    return new Sha1(true).update(message)[\"hex\"]();\r\n};\r\n", "import { insecureHash } from \"../utils/hash.js\";\r\nimport { mapStoredMessageToChatMessage } from \"../messages/utils.js\";\r\n/**\r\n * This cache key should be consistent across all versions of LangChain.\r\n * It is currently NOT consistent across versions of LangChain.\r\n *\r\n * A huge benefit of having a remote cache (like redis) is that you can\r\n * access the cache from different processes/machines. The allows you to\r\n * separate concerns and scale horizontally.\r\n *\r\n * TODO: Make cache key consistent across versions of LangChain.\r\n */\r\nexport const getCacheKey = (...strings) => insecureHash(strings.join(\"_\"));\r\nexport function deserializeStoredGeneration(storedGeneration) {\r\n    if (storedGeneration.message !== undefined) {\r\n        return {\r\n            text: storedGeneration.text,\r\n            message: mapStoredMessageToChatMessage(storedGeneration.message),\r\n        };\r\n    }\r\n    else {\r\n        return { text: storedGeneration.text };\r\n    }\r\n}\r\nexport function serializeGeneration(generation) {\r\n    const serializedValue = {\r\n        text: generation.text,\r\n    };\r\n    if (generation.message !== undefined) {\r\n        serializedValue.message = generation.message.toDict();\r\n    }\r\n    return serializedValue;\r\n}\r\n/**\r\n * Base class for all caches. All caches should extend this class.\r\n */\r\nexport class BaseCache {\r\n}\r\nconst GLOBAL_MAP = new Map();\r\n/**\r\n * A cache for storing LLM generations that stores data in memory.\r\n */\r\nexport class InMemoryCache extends BaseCache {\r\n    constructor(map) {\r\n        super();\r\n        Object.defineProperty(this, \"cache\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.cache = map ?? new Map();\r\n    }\r\n    /**\r\n     * Retrieves data from the cache using a prompt and an LLM key. If the\r\n     * data is not found, it returns null.\r\n     * @param prompt The prompt used to find the data.\r\n     * @param llmKey The LLM key used to find the data.\r\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\r\n     */\r\n    lookup(prompt, llmKey) {\r\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\r\n    }\r\n    /**\r\n     * Updates the cache with new data using a prompt and an LLM key.\r\n     * @param prompt The prompt used to store the data.\r\n     * @param llmKey The LLM key used to store the data.\r\n     * @param value The data to be stored.\r\n     */\r\n    async update(prompt, llmKey, value) {\r\n        this.cache.set(getCacheKey(prompt, llmKey), value);\r\n    }\r\n    /**\r\n     * Returns a global instance of InMemoryCache using a predefined global\r\n     * map as the initial cache.\r\n     * @returns A global instance of InMemoryCache.\r\n     */\r\n    static global() {\r\n        return new InMemoryCache(GLOBAL_MAP);\r\n    }\r\n}\r\n", "import base64 from 'base64-js';\r\n\r\nvar __defProp = Object.defineProperty;\r\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\r\nvar __publicField = (obj, key, value) => {\r\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\r\n  return value;\r\n};\r\n\r\n// src/utils.ts\r\nfunction never(_) {\r\n}\r\nfunction bytePairMerge(piece, ranks) {\r\n  let parts = Array.from(\r\n    { length: piece.length },\r\n    (_, i) => ({ start: i, end: i + 1 })\r\n  );\r\n  while (parts.length > 1) {\r\n    let minRank = null;\r\n    for (let i = 0; i < parts.length - 1; i++) {\r\n      const slice = piece.slice(parts[i].start, parts[i + 1].end);\r\n      const rank = ranks.get(slice.join(\",\"));\r\n      if (rank == null)\r\n        continue;\r\n      if (minRank == null || rank < minRank[0]) {\r\n        minRank = [rank, i];\r\n      }\r\n    }\r\n    if (minRank != null) {\r\n      const i = minRank[1];\r\n      parts[i] = { start: parts[i].start, end: parts[i + 1].end };\r\n      parts.splice(i + 1, 1);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return parts;\r\n}\r\nfunction bytePairEncode(piece, ranks) {\r\n  if (piece.length === 1)\r\n    return [ranks.get(piece.join(\",\"))];\r\n  return bytePairMerge(piece, ranks).map((p) => ranks.get(piece.slice(p.start, p.end).join(\",\"))).filter((x) => x != null);\r\n}\r\nfunction escapeRegex(str) {\r\n  return str.replace(/[\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n}\r\nvar _Tiktoken = class {\r\n  /** @internal */\r\n  specialTokens;\r\n  /** @internal */\r\n  inverseSpecialTokens;\r\n  /** @internal */\r\n  patStr;\r\n  /** @internal */\r\n  textEncoder = new TextEncoder();\r\n  /** @internal */\r\n  textDecoder = new TextDecoder(\"utf-8\");\r\n  /** @internal */\r\n  rankMap = /* @__PURE__ */ new Map();\r\n  /** @internal */\r\n  textMap = /* @__PURE__ */ new Map();\r\n  constructor(ranks, extendedSpecialTokens) {\r\n    this.patStr = ranks.pat_str;\r\n    const uncompressed = ranks.bpe_ranks.split(\"\\n\").filter(Boolean).reduce((memo, x) => {\r\n      const [_, offsetStr, ...tokens] = x.split(\" \");\r\n      const offset = Number.parseInt(offsetStr, 10);\r\n      tokens.forEach((token, i) => memo[token] = offset + i);\r\n      return memo;\r\n    }, {});\r\n    for (const [token, rank] of Object.entries(uncompressed)) {\r\n      const bytes = base64.toByteArray(token);\r\n      this.rankMap.set(bytes.join(\",\"), rank);\r\n      this.textMap.set(rank, bytes);\r\n    }\r\n    this.specialTokens = { ...ranks.special_tokens, ...extendedSpecialTokens };\r\n    this.inverseSpecialTokens = Object.entries(this.specialTokens).reduce((memo, [text, rank]) => {\r\n      memo[rank] = this.textEncoder.encode(text);\r\n      return memo;\r\n    }, {});\r\n  }\r\n  encode(text, allowedSpecial = [], disallowedSpecial = \"all\") {\r\n    const regexes = new RegExp(this.patStr, \"ug\");\r\n    const specialRegex = _Tiktoken.specialTokenRegex(\r\n      Object.keys(this.specialTokens)\r\n    );\r\n    const ret = [];\r\n    const allowedSpecialSet = new Set(\r\n      allowedSpecial === \"all\" ? Object.keys(this.specialTokens) : allowedSpecial\r\n    );\r\n    const disallowedSpecialSet = new Set(\r\n      disallowedSpecial === \"all\" ? Object.keys(this.specialTokens).filter(\r\n        (x) => !allowedSpecialSet.has(x)\r\n      ) : disallowedSpecial\r\n    );\r\n    if (disallowedSpecialSet.size > 0) {\r\n      const disallowedSpecialRegex = _Tiktoken.specialTokenRegex([\r\n        ...disallowedSpecialSet\r\n      ]);\r\n      const specialMatch = text.match(disallowedSpecialRegex);\r\n      if (specialMatch != null) {\r\n        throw new Error(\r\n          `The text contains a special token that is not allowed: ${specialMatch[0]}`\r\n        );\r\n      }\r\n    }\r\n    let start = 0;\r\n    while (true) {\r\n      let nextSpecial = null;\r\n      let startFind = start;\r\n      while (true) {\r\n        specialRegex.lastIndex = startFind;\r\n        nextSpecial = specialRegex.exec(text);\r\n        if (nextSpecial == null || allowedSpecialSet.has(nextSpecial[0]))\r\n          break;\r\n        startFind = nextSpecial.index + 1;\r\n      }\r\n      const end = nextSpecial?.index ?? text.length;\r\n      for (const match of text.substring(start, end).matchAll(regexes)) {\r\n        const piece = this.textEncoder.encode(match[0]);\r\n        const token2 = this.rankMap.get(piece.join(\",\"));\r\n        if (token2 != null) {\r\n          ret.push(token2);\r\n          continue;\r\n        }\r\n        ret.push(...bytePairEncode(piece, this.rankMap));\r\n      }\r\n      if (nextSpecial == null)\r\n        break;\r\n      let token = this.specialTokens[nextSpecial[0]];\r\n      ret.push(token);\r\n      start = nextSpecial.index + nextSpecial[0].length;\r\n    }\r\n    return ret;\r\n  }\r\n  decode(tokens) {\r\n    const res = [];\r\n    let length = 0;\r\n    for (let i2 = 0; i2 < tokens.length; ++i2) {\r\n      const token = tokens[i2];\r\n      const bytes = this.textMap.get(token) ?? this.inverseSpecialTokens[token];\r\n      if (bytes != null) {\r\n        res.push(bytes);\r\n        length += bytes.length;\r\n      }\r\n    }\r\n    const mergedArray = new Uint8Array(length);\r\n    let i = 0;\r\n    for (const bytes of res) {\r\n      mergedArray.set(bytes, i);\r\n      i += bytes.length;\r\n    }\r\n    return this.textDecoder.decode(mergedArray);\r\n  }\r\n};\r\nvar Tiktoken = _Tiktoken;\r\n__publicField(Tiktoken, \"specialTokenRegex\", (tokens) => {\r\n  return new RegExp(tokens.map((i) => escapeRegex(i)).join(\"|\"), \"g\");\r\n});\r\nfunction getEncodingNameForModel(model) {\r\n  switch (model) {\r\n    case \"gpt2\": {\r\n      return \"gpt2\";\r\n    }\r\n    case \"code-cushman-001\":\r\n    case \"code-cushman-002\":\r\n    case \"code-davinci-001\":\r\n    case \"code-davinci-002\":\r\n    case \"cushman-codex\":\r\n    case \"davinci-codex\":\r\n    case \"davinci-002\":\r\n    case \"text-davinci-002\":\r\n    case \"text-davinci-003\": {\r\n      return \"p50k_base\";\r\n    }\r\n    case \"code-davinci-edit-001\":\r\n    case \"text-davinci-edit-001\": {\r\n      return \"p50k_edit\";\r\n    }\r\n    case \"ada\":\r\n    case \"babbage\":\r\n    case \"babbage-002\":\r\n    case \"code-search-ada-code-001\":\r\n    case \"code-search-babbage-code-001\":\r\n    case \"curie\":\r\n    case \"davinci\":\r\n    case \"text-ada-001\":\r\n    case \"text-babbage-001\":\r\n    case \"text-curie-001\":\r\n    case \"text-davinci-001\":\r\n    case \"text-search-ada-doc-001\":\r\n    case \"text-search-babbage-doc-001\":\r\n    case \"text-search-curie-doc-001\":\r\n    case \"text-search-davinci-doc-001\":\r\n    case \"text-similarity-ada-001\":\r\n    case \"text-similarity-babbage-001\":\r\n    case \"text-similarity-curie-001\":\r\n    case \"text-similarity-davinci-001\": {\r\n      return \"r50k_base\";\r\n    }\r\n    case \"gpt-3.5-turbo-instruct-0914\":\r\n    case \"gpt-3.5-turbo-instruct\":\r\n    case \"gpt-3.5-turbo-16k-0613\":\r\n    case \"gpt-3.5-turbo-16k\":\r\n    case \"gpt-3.5-turbo-0613\":\r\n    case \"gpt-3.5-turbo-0301\":\r\n    case \"gpt-3.5-turbo\":\r\n    case \"gpt-4-32k-0613\":\r\n    case \"gpt-4-32k-0314\":\r\n    case \"gpt-4-32k\":\r\n    case \"gpt-4-0613\":\r\n    case \"gpt-4-0314\":\r\n    case \"gpt-4\":\r\n    case \"gpt-3.5-turbo-1106\":\r\n    case \"gpt-35-turbo\":\r\n    case \"gpt-4-1106-preview\":\r\n    case \"gpt-4-vision-preview\":\r\n    case \"gpt-3.5-turbo-0125\":\r\n    case \"gpt-4-turbo\":\r\n    case \"gpt-4-turbo-2024-04-09\":\r\n    case \"gpt-4-turbo-preview\":\r\n    case \"gpt-4-0125-preview\":\r\n    case \"text-embedding-ada-002\":\r\n    case \"text-embedding-3-small\":\r\n    case \"text-embedding-3-large\": {\r\n      return \"cl100k_base\";\r\n    }\r\n    case \"gpt-4o\":\r\n    case \"gpt-4o-2024-05-13\":\r\n    case \"gpt-4o-2024-08-06\":\r\n    case \"gpt-4o-mini-2024-07-18\":\r\n    case \"gpt-4o-mini\":\r\n    case \"o1-mini\":\r\n    case \"o1-preview\":\r\n    case \"o1-preview-2024-09-12\":\r\n    case \"o1-mini-2024-09-12\":\r\n    case \"chatgpt-4o-latest\":\r\n    case \"gpt-4o-realtime\":\r\n    case \"gpt-4o-realtime-preview-2024-10-01\": {\r\n      return \"o200k_base\";\r\n    }\r\n    default:\r\n      throw new Error(\"Unknown model\");\r\n  }\r\n}\r\n\r\nexport { Tiktoken, getEncodingNameForModel, never };\r\n", "import { Tiktoken, getEncodingNameForModel, } from \"js-tiktoken/lite\";\r\nimport { AsyncCaller } from \"./async_caller.js\";\r\nconst cache = {};\r\nconst caller = /* #__PURE__ */ new AsyncCaller({});\r\nexport async function getEncoding(encoding) {\r\n    if (!(encoding in cache)) {\r\n        cache[encoding] = caller\r\n            .fetch(`https://tiktoken.pages.dev/js/${encoding}.json`)\r\n            .then((res) => res.json())\r\n            .then((data) => new Tiktoken(data))\r\n            .catch((e) => {\r\n            delete cache[encoding];\r\n            throw e;\r\n        });\r\n    }\r\n    return await cache[encoding];\r\n}\r\nexport async function encodingForModel(model) {\r\n    return getEncoding(getEncodingNameForModel(model));\r\n}\r\n", "import { InMemoryCache } from \"../caches/base.js\";\r\nimport { StringPromptValue, ChatPromptValue, } from \"../prompt_values.js\";\r\nimport { coerceMessageLikeToMessage } from \"../messages/utils.js\";\r\nimport { AsyncCaller } from \"../utils/async_caller.js\";\r\nimport { encodingForModel } from \"../utils/tiktoken.js\";\r\nimport { Runnable } from \"../runnables/base.js\";\r\n// https://www.npmjs.com/package/js-tiktoken\r\nexport const getModelNameForTiktoken = (modelName) => {\r\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\r\n        return \"gpt-3.5-turbo-16k\";\r\n    }\r\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\r\n        return \"gpt-3.5-turbo\";\r\n    }\r\n    if (modelName.startsWith(\"gpt-4-32k\")) {\r\n        return \"gpt-4-32k\";\r\n    }\r\n    if (modelName.startsWith(\"gpt-4-\")) {\r\n        return \"gpt-4\";\r\n    }\r\n    if (modelName.startsWith(\"gpt-4o\")) {\r\n        return \"gpt-4o\";\r\n    }\r\n    return modelName;\r\n};\r\nexport const getEmbeddingContextSize = (modelName) => {\r\n    switch (modelName) {\r\n        case \"text-embedding-ada-002\":\r\n            return 8191;\r\n        default:\r\n            return 2046;\r\n    }\r\n};\r\nexport const getModelContextSize = (modelName) => {\r\n    switch (getModelNameForTiktoken(modelName)) {\r\n        case \"gpt-3.5-turbo-16k\":\r\n            return 16384;\r\n        case \"gpt-3.5-turbo\":\r\n            return 4096;\r\n        case \"gpt-4-32k\":\r\n            return 32768;\r\n        case \"gpt-4\":\r\n            return 8192;\r\n        case \"text-davinci-003\":\r\n            return 4097;\r\n        case \"text-curie-001\":\r\n            return 2048;\r\n        case \"text-babbage-001\":\r\n            return 2048;\r\n        case \"text-ada-001\":\r\n            return 2048;\r\n        case \"code-davinci-002\":\r\n            return 8000;\r\n        case \"code-cushman-001\":\r\n            return 2048;\r\n        default:\r\n            return 4097;\r\n    }\r\n};\r\n/**\r\n * Whether or not the input matches the OpenAI tool definition.\r\n * @param {unknown} tool The input to check.\r\n * @returns {boolean} Whether the input is an OpenAI tool definition.\r\n */\r\nexport function isOpenAITool(tool) {\r\n    if (typeof tool !== \"object\" || !tool)\r\n        return false;\r\n    if (\"type\" in tool &&\r\n        tool.type === \"function\" &&\r\n        \"function\" in tool &&\r\n        typeof tool.function === \"object\" &&\r\n        tool.function &&\r\n        \"name\" in tool.function &&\r\n        \"parameters\" in tool.function) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport const calculateMaxTokens = async ({ prompt, modelName, }) => {\r\n    let numTokens;\r\n    try {\r\n        numTokens = (await encodingForModel(getModelNameForTiktoken(modelName))).encode(prompt).length;\r\n    }\r\n    catch (error) {\r\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\r\n        // fallback to approximate calculation if tiktoken is not available\r\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\r\n        numTokens = Math.ceil(prompt.length / 4);\r\n    }\r\n    const maxTokens = getModelContextSize(modelName);\r\n    return maxTokens - numTokens;\r\n};\r\nconst getVerbosity = () => false;\r\n/**\r\n * Base class for language models, chains, tools.\r\n */\r\nexport class BaseLangChain extends Runnable {\r\n    get lc_attributes() {\r\n        return {\r\n            callbacks: undefined,\r\n            verbose: undefined,\r\n        };\r\n    }\r\n    constructor(params) {\r\n        super(params);\r\n        /**\r\n         * Whether to print out response text.\r\n         */\r\n        Object.defineProperty(this, \"verbose\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"callbacks\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"tags\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"metadata\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.verbose = params.verbose ?? getVerbosity();\r\n        this.callbacks = params.callbacks;\r\n        this.tags = params.tags ?? [];\r\n        this.metadata = params.metadata ?? {};\r\n    }\r\n}\r\n/**\r\n * Base class for language models.\r\n */\r\nexport class BaseLanguageModel extends BaseLangChain {\r\n    /**\r\n     * Keys that the language model accepts as call options.\r\n     */\r\n    get callKeys() {\r\n        return [\"stop\", \"timeout\", \"signal\", \"tags\", \"metadata\", \"callbacks\"];\r\n    }\r\n    constructor({ callbacks, callbackManager, ...params }) {\r\n        const { cache, ...rest } = params;\r\n        super({\r\n            callbacks: callbacks ?? callbackManager,\r\n            ...rest,\r\n        });\r\n        /**\r\n         * The async caller should be used by subclasses to make any async calls,\r\n         * which will thus benefit from the concurrency and retry logic.\r\n         */\r\n        Object.defineProperty(this, \"caller\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"cache\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_encoding\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        if (typeof cache === \"object\") {\r\n            this.cache = cache;\r\n        }\r\n        else if (cache) {\r\n            this.cache = InMemoryCache.global();\r\n        }\r\n        else {\r\n            this.cache = undefined;\r\n        }\r\n        this.caller = new AsyncCaller(params ?? {});\r\n    }\r\n    async getNumTokens(content) {\r\n        // TODO: Figure out correct value.\r\n        if (typeof content !== \"string\") {\r\n            return 0;\r\n        }\r\n        // fallback to approximate calculation if tiktoken is not available\r\n        let numTokens = Math.ceil(content.length / 4);\r\n        if (!this._encoding) {\r\n            try {\r\n                this._encoding = await encodingForModel(\"modelName\" in this\r\n                    ? getModelNameForTiktoken(this.modelName)\r\n                    : \"gpt2\");\r\n            }\r\n            catch (error) {\r\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\r\n            }\r\n        }\r\n        if (this._encoding) {\r\n            try {\r\n                numTokens = this._encoding.encode(content).length;\r\n            }\r\n            catch (error) {\r\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\r\n            }\r\n        }\r\n        return numTokens;\r\n    }\r\n    static _convertInputToPromptValue(input) {\r\n        if (typeof input === \"string\") {\r\n            return new StringPromptValue(input);\r\n        }\r\n        else if (Array.isArray(input)) {\r\n            return new ChatPromptValue(input.map(coerceMessageLikeToMessage));\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    }\r\n    /**\r\n     * Get the identifying parameters of the LLM.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    _identifyingParams() {\r\n        return {};\r\n    }\r\n    /**\r\n     * Create a unique cache key for a specific call to a specific language model.\r\n     * @param callOptions Call options for the model\r\n     * @returns A unique cache key.\r\n     */\r\n    _getSerializedCacheKeyParametersForCall(\r\n    // TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\r\n    { config, ...callOptions }) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const params = {\r\n            ...this._identifyingParams(),\r\n            ...callOptions,\r\n            _type: this._llmType(),\r\n            _model: this._modelType(),\r\n        };\r\n        const filteredEntries = Object.entries(params).filter(([_, value]) => value !== undefined);\r\n        const serializedEntries = filteredEntries\r\n            .map(([key, value]) => `${key}:${JSON.stringify(value)}`)\r\n            .sort()\r\n            .join(\",\");\r\n        return serializedEntries;\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * Return a json-like object representing this LLM.\r\n     */\r\n    serialize() {\r\n        return {\r\n            ...this._identifyingParams(),\r\n            _type: this._llmType(),\r\n            _model: this._modelType(),\r\n        };\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * Load an LLM from a json-like object describing it.\r\n     */\r\n    static async deserialize(_data) {\r\n        throw new Error(\"Use .toJSON() instead\");\r\n    }\r\n}\r\n", "/**\r\n * Given either a Zod schema, or plain object, determine if the input is a Zod schema.\r\n *\r\n * @param {z.ZodType<RunOutput> | Record<string, any>} input\r\n * @returns {boolean} Whether or not the provided input is a Zod schema.\r\n */\r\nexport function isZodSchema(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ninput) {\r\n    // Check for a characteristic method of Zod schemas\r\n    return typeof input?.parse === \"function\";\r\n}\r\n", "import { zodToJsonSchema } from \"zod-to-json-schema\";\r\nimport { AIMessage, HumanMessage, coerceMessageLikeToMessage, isAIMessageChunk, } from \"../messages/index.js\";\r\nimport { RUN_KEY, } from \"../outputs.js\";\r\nimport { BaseLanguageModel, } from \"./base.js\";\r\nimport { CallbackManager, } from \"../callbacks/manager.js\";\r\nimport { RunnableLambda, RunnableSequence, } from \"../runnables/base.js\";\r\nimport { isStreamEventsHandler } from \"../tracers/event_stream.js\";\r\nimport { isLogStreamHandler } from \"../tracers/log_stream.js\";\r\nimport { concat } from \"../utils/stream.js\";\r\nimport { RunnablePassthrough } from \"../runnables/passthrough.js\";\r\nimport { isZodSchema } from \"../utils/types/is_zod_schema.js\";\r\n/**\r\n * Creates a transform stream for encoding chat message chunks.\r\n * @deprecated Use {@link BytesOutputParser} instead\r\n * @returns A TransformStream instance that encodes chat message chunks.\r\n */\r\nexport function createChatMessageChunkEncoderStream() {\r\n    const textEncoder = new TextEncoder();\r\n    return new TransformStream({\r\n        transform(chunk, controller) {\r\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\"\r\n                ? chunk.content\r\n                : JSON.stringify(chunk.content)));\r\n        },\r\n    });\r\n}\r\n/**\r\n * Base class for chat models. It extends the BaseLanguageModel class and\r\n * provides methods for generating chat based on input messages.\r\n */\r\nexport class BaseChatModel extends BaseLanguageModel {\r\n    constructor(fields) {\r\n        super(fields);\r\n        // Only ever instantiated in main LangChain\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"chat_models\", this._llmType()]\r\n        });\r\n    }\r\n    _separateRunnableConfigFromCallOptionsCompat(options) {\r\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\r\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\r\n        callOptions.signal = runnableConfig.signal;\r\n        return [runnableConfig, callOptions];\r\n    }\r\n    /**\r\n     * Invokes the chat model with a single input.\r\n     * @param input The input for the language model.\r\n     * @param options The call options.\r\n     * @returns A Promise that resolves to a BaseMessageChunk.\r\n     */\r\n    async invoke(input, options) {\r\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\r\n        const result = await this.generatePrompt([promptValue], options, options?.callbacks);\r\n        const chatGeneration = result.generations[0][0];\r\n        // TODO: Remove cast after figuring out inheritance\r\n        return chatGeneration.message;\r\n    }\r\n    // eslint-disable-next-line require-yield\r\n    async *_streamResponseChunks(_messages, _options, _runManager) {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    async *_streamIterator(input, options) {\r\n        // Subclass check required to avoid double callbacks with default implementation\r\n        if (this._streamResponseChunks ===\r\n            BaseChatModel.prototype._streamResponseChunks) {\r\n            yield this.invoke(input, options);\r\n        }\r\n        else {\r\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\r\n            const messages = prompt.toChatMessages();\r\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\r\n            const inheritableMetadata = {\r\n                ...runnableConfig.metadata,\r\n                ...this.getLsParams(callOptions),\r\n            };\r\n            const callbackManager_ = await CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\r\n            const extra = {\r\n                options: callOptions,\r\n                invocation_params: this?.invocationParams(callOptions),\r\n                batch_size: 1,\r\n            };\r\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [messages], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\r\n            let generationChunk;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            let llmOutput;\r\n            try {\r\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])) {\r\n                    if (chunk.message.id == null) {\r\n                        const runId = runManagers?.at(0)?.runId;\r\n                        if (runId != null)\r\n                            chunk.message._updateId(`run-${runId}`);\r\n                    }\r\n                    chunk.message.response_metadata = {\r\n                        ...chunk.generationInfo,\r\n                        ...chunk.message.response_metadata,\r\n                    };\r\n                    yield chunk.message;\r\n                    if (!generationChunk) {\r\n                        generationChunk = chunk;\r\n                    }\r\n                    else {\r\n                        generationChunk = generationChunk.concat(chunk);\r\n                    }\r\n                    if (isAIMessageChunk(chunk.message) &&\r\n                        chunk.message.usage_metadata !== undefined) {\r\n                        llmOutput = {\r\n                            tokenUsage: {\r\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\r\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\r\n                                totalTokens: chunk.message.usage_metadata.total_tokens,\r\n                            },\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            catch (err) {\r\n                await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMError(err)));\r\n                throw err;\r\n            }\r\n            await Promise.all((runManagers ?? []).map((runManager) => runManager?.handleLLMEnd({\r\n                // TODO: Remove cast after figuring out inheritance\r\n                generations: [[generationChunk]],\r\n                llmOutput,\r\n            })));\r\n        }\r\n    }\r\n    getLsParams(options) {\r\n        return {\r\n            ls_model_type: \"chat\",\r\n            ls_stop: options.stop,\r\n        };\r\n    }\r\n    /** @ignore */\r\n    async _generateUncached(messages, parsedOptions, handledOptions) {\r\n        const baseMessages = messages.map((messageList) => messageList.map(coerceMessageLikeToMessage));\r\n        const inheritableMetadata = {\r\n            ...handledOptions.metadata,\r\n            ...this.getLsParams(parsedOptions),\r\n        };\r\n        // create callback manager and start run\r\n        const callbackManager_ = await CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\r\n        const extra = {\r\n            options: parsedOptions,\r\n            invocation_params: this?.invocationParams(parsedOptions),\r\n            batch_size: 1,\r\n        };\r\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\r\n        const generations = [];\r\n        const llmOutputs = [];\r\n        // Even if stream is not explicitly called, check if model is implicitly\r\n        // called from streamEvents() or streamLog() to get all streamed events.\r\n        // Bail out if _streamResponseChunks not overridden\r\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find((handler) => {\r\n            return isStreamEventsHandler(handler) || isLogStreamHandler(handler);\r\n        });\r\n        if (hasStreamingHandler &&\r\n            baseMessages.length === 1 &&\r\n            this._streamResponseChunks !==\r\n                BaseChatModel.prototype._streamResponseChunks) {\r\n            try {\r\n                const stream = await this._streamResponseChunks(baseMessages[0], parsedOptions, runManagers?.[0]);\r\n                let aggregated;\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                let llmOutput;\r\n                for await (const chunk of stream) {\r\n                    if (chunk.message.id == null) {\r\n                        const runId = runManagers?.at(0)?.runId;\r\n                        if (runId != null)\r\n                            chunk.message._updateId(`run-${runId}`);\r\n                    }\r\n                    if (aggregated === undefined) {\r\n                        aggregated = chunk;\r\n                    }\r\n                    else {\r\n                        aggregated = concat(aggregated, chunk);\r\n                    }\r\n                    if (isAIMessageChunk(chunk.message) &&\r\n                        chunk.message.usage_metadata !== undefined) {\r\n                        llmOutput = {\r\n                            tokenUsage: {\r\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\r\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\r\n                                totalTokens: chunk.message.usage_metadata.total_tokens,\r\n                            },\r\n                        };\r\n                    }\r\n                }\r\n                if (aggregated === undefined) {\r\n                    throw new Error(\"Received empty response from chat model call.\");\r\n                }\r\n                generations.push([aggregated]);\r\n                await runManagers?.[0].handleLLMEnd({\r\n                    generations,\r\n                    llmOutput,\r\n                });\r\n            }\r\n            catch (e) {\r\n                await runManagers?.[0].handleLLMError(e);\r\n                throw e;\r\n            }\r\n        }\r\n        else {\r\n            // generate results\r\n            const results = await Promise.allSettled(baseMessages.map((messageList, i) => this._generate(messageList, { ...parsedOptions, promptIndex: i }, runManagers?.[i])));\r\n            // handle results\r\n            await Promise.all(results.map(async (pResult, i) => {\r\n                if (pResult.status === \"fulfilled\") {\r\n                    const result = pResult.value;\r\n                    for (const generation of result.generations) {\r\n                        if (generation.message.id == null) {\r\n                            const runId = runManagers?.at(0)?.runId;\r\n                            if (runId != null)\r\n                                generation.message._updateId(`run-${runId}`);\r\n                        }\r\n                        generation.message.response_metadata = {\r\n                            ...generation.generationInfo,\r\n                            ...generation.message.response_metadata,\r\n                        };\r\n                    }\r\n                    if (result.generations.length === 1) {\r\n                        result.generations[0].message.response_metadata = {\r\n                            ...result.llmOutput,\r\n                            ...result.generations[0].message.response_metadata,\r\n                        };\r\n                    }\r\n                    generations[i] = result.generations;\r\n                    llmOutputs[i] = result.llmOutput;\r\n                    return runManagers?.[i]?.handleLLMEnd({\r\n                        generations: [result.generations],\r\n                        llmOutput: result.llmOutput,\r\n                    });\r\n                }\r\n                else {\r\n                    // status === \"rejected\"\r\n                    await runManagers?.[i]?.handleLLMError(pResult.reason);\r\n                    return Promise.reject(pResult.reason);\r\n                }\r\n            }));\r\n        }\r\n        // create combined output\r\n        const output = {\r\n            generations,\r\n            llmOutput: llmOutputs.length\r\n                ? this._combineLLMOutput?.(...llmOutputs)\r\n                : undefined,\r\n        };\r\n        Object.defineProperty(output, RUN_KEY, {\r\n            value: runManagers\r\n                ? { runIds: runManagers?.map((manager) => manager.runId) }\r\n                : undefined,\r\n            configurable: true,\r\n        });\r\n        return output;\r\n    }\r\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions, }) {\r\n        const baseMessages = messages.map((messageList) => messageList.map(coerceMessageLikeToMessage));\r\n        const inheritableMetadata = {\r\n            ...handledOptions.metadata,\r\n            ...this.getLsParams(parsedOptions),\r\n        };\r\n        // create callback manager and start run\r\n        const callbackManager_ = await CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, { verbose: this.verbose });\r\n        const extra = {\r\n            options: parsedOptions,\r\n            invocation_params: this?.invocationParams(parsedOptions),\r\n            batch_size: 1,\r\n            cached: true,\r\n        };\r\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\r\n        // generate results\r\n        const missingPromptIndices = [];\r\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index) => {\r\n            // Join all content into one string for the prompt index\r\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\r\n            const result = await cache.lookup(prompt, llmStringKey);\r\n            if (result == null) {\r\n                missingPromptIndices.push(index);\r\n            }\r\n            return result;\r\n        }));\r\n        // Map run managers to the results before filtering out null results\r\n        // Null results are just absent from the cache.\r\n        const cachedResults = results\r\n            .map((result, index) => ({ result, runManager: runManagers?.[index] }))\r\n            .filter(({ result }) => (result.status === \"fulfilled\" && result.value != null) ||\r\n            result.status === \"rejected\");\r\n        // Handle results and call run managers\r\n        const generations = [];\r\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i) => {\r\n            if (promiseResult.status === \"fulfilled\") {\r\n                const result = promiseResult.value;\r\n                generations[i] = result;\r\n                if (result.length) {\r\n                    await runManager?.handleLLMNewToken(result[0].text);\r\n                }\r\n                return runManager?.handleLLMEnd({\r\n                    generations: [result],\r\n                });\r\n            }\r\n            else {\r\n                // status === \"rejected\"\r\n                await runManager?.handleLLMError(promiseResult.reason);\r\n                return Promise.reject(promiseResult.reason);\r\n            }\r\n        }));\r\n        const output = {\r\n            generations,\r\n            missingPromptIndices,\r\n        };\r\n        // This defines RUN_KEY as a non-enumerable property on the output object\r\n        // so that it is not serialized when the output is stringified, and so that\r\n        // it isnt included when listing the keys of the output object.\r\n        Object.defineProperty(output, RUN_KEY, {\r\n            value: runManagers\r\n                ? { runIds: runManagers?.map((manager) => manager.runId) }\r\n                : undefined,\r\n            configurable: true,\r\n        });\r\n        return output;\r\n    }\r\n    /**\r\n     * Generates chat based on the input messages.\r\n     * @param messages An array of arrays of BaseMessage instances.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to an LLMResult.\r\n     */\r\n    async generate(messages, options, callbacks) {\r\n        // parse call options\r\n        let parsedOptions;\r\n        if (Array.isArray(options)) {\r\n            parsedOptions = { stop: options };\r\n        }\r\n        else {\r\n            parsedOptions = options;\r\n        }\r\n        const baseMessages = messages.map((messageList) => messageList.map(coerceMessageLikeToMessage));\r\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\r\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\r\n        if (!this.cache) {\r\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\r\n        }\r\n        const { cache } = this;\r\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\r\n        const { generations, missingPromptIndices } = await this._generateCached({\r\n            messages: baseMessages,\r\n            cache,\r\n            llmStringKey,\r\n            parsedOptions: callOptions,\r\n            handledOptions: runnableConfig,\r\n        });\r\n        let llmOutput = {};\r\n        if (missingPromptIndices.length > 0) {\r\n            const results = await this._generateUncached(missingPromptIndices.map((i) => baseMessages[i]), callOptions, runnableConfig);\r\n            await Promise.all(results.generations.map(async (generation, index) => {\r\n                const promptIndex = missingPromptIndices[index];\r\n                generations[promptIndex] = generation;\r\n                // Join all content into one string for the prompt index\r\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\r\n                return cache.update(prompt, llmStringKey, generation);\r\n            }));\r\n            llmOutput = results.llmOutput ?? {};\r\n        }\r\n        return { generations, llmOutput };\r\n    }\r\n    /**\r\n     * Get the parameters used to invoke the model\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    invocationParams(_options) {\r\n        return {};\r\n    }\r\n    _modelType() {\r\n        return \"base_chat_model\";\r\n    }\r\n    /**\r\n     * @deprecated\r\n     * Return a json-like object representing this LLM.\r\n     */\r\n    serialize() {\r\n        return {\r\n            ...this.invocationParams(),\r\n            _type: this._llmType(),\r\n            _model: this._modelType(),\r\n        };\r\n    }\r\n    /**\r\n     * Generates a prompt based on the input prompt values.\r\n     * @param promptValues An array of BasePromptValue instances.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to an LLMResult.\r\n     */\r\n    async generatePrompt(promptValues, options, callbacks) {\r\n        const promptMessages = promptValues.map((promptValue) => promptValue.toChatMessages());\r\n        return this.generate(promptMessages, options, callbacks);\r\n    }\r\n    /**\r\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\r\n     *\r\n     * Makes a single call to the chat model.\r\n     * @param messages An array of BaseMessage instances.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to a BaseMessage.\r\n     */\r\n    async call(messages, options, callbacks) {\r\n        const result = await this.generate([messages.map(coerceMessageLikeToMessage)], options, callbacks);\r\n        const generations = result.generations;\r\n        return generations[0][0].message;\r\n    }\r\n    /**\r\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\r\n     *\r\n     * Makes a single call to the chat model with a prompt value.\r\n     * @param promptValue The value of the prompt.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to a BaseMessage.\r\n     */\r\n    async callPrompt(promptValue, options, callbacks) {\r\n        const promptMessages = promptValue.toChatMessages();\r\n        return this.call(promptMessages, options, callbacks);\r\n    }\r\n    /**\r\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\r\n     *\r\n     * Predicts the next message based on the input messages.\r\n     * @param messages An array of BaseMessage instances.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to a BaseMessage.\r\n     */\r\n    async predictMessages(messages, options, callbacks) {\r\n        return this.call(messages, options, callbacks);\r\n    }\r\n    /**\r\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\r\n     *\r\n     * Predicts the next message based on a text input.\r\n     * @param text The text input.\r\n     * @param options The call options or an array of stop sequences.\r\n     * @param callbacks The callbacks for the language model.\r\n     * @returns A Promise that resolves to a string.\r\n     */\r\n    async predict(text, options, callbacks) {\r\n        const message = new HumanMessage(text);\r\n        const result = await this.call([message], options, callbacks);\r\n        if (typeof result.content !== \"string\") {\r\n            throw new Error(\"Cannot use predict when output is not a string.\");\r\n        }\r\n        return result.content;\r\n    }\r\n    withStructuredOutput(outputSchema, config) {\r\n        if (typeof this.bindTools !== \"function\") {\r\n            throw new Error(`Chat model must implement \".bindTools()\" to use withStructuredOutput.`);\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const schema = outputSchema;\r\n        const name = config?.name;\r\n        const description = schema.description ?? \"A function available to call.\";\r\n        const method = config?.method;\r\n        const includeRaw = config?.includeRaw;\r\n        if (method === \"jsonMode\") {\r\n            throw new Error(`Base withStructuredOutput implementation only supports \"functionCalling\" as a method.`);\r\n        }\r\n        let functionName = name ?? \"extract\";\r\n        let tools;\r\n        if (isZodSchema(schema)) {\r\n            tools = [\r\n                {\r\n                    type: \"function\",\r\n                    function: {\r\n                        name: functionName,\r\n                        description,\r\n                        parameters: zodToJsonSchema(schema),\r\n                    },\r\n                },\r\n            ];\r\n        }\r\n        else {\r\n            if (\"name\" in schema) {\r\n                functionName = schema.name;\r\n            }\r\n            tools = [\r\n                {\r\n                    type: \"function\",\r\n                    function: {\r\n                        name: functionName,\r\n                        description,\r\n                        parameters: schema,\r\n                    },\r\n                },\r\n            ];\r\n        }\r\n        const llm = this.bindTools(tools);\r\n        const outputParser = RunnableLambda.from((input) => {\r\n            if (!input.tool_calls || input.tool_calls.length === 0) {\r\n                throw new Error(\"No tool calls found in the response.\");\r\n            }\r\n            const toolCall = input.tool_calls.find((tc) => tc.name === functionName);\r\n            if (!toolCall) {\r\n                throw new Error(`No tool call found with name ${functionName}.`);\r\n            }\r\n            return toolCall.args;\r\n        });\r\n        if (!includeRaw) {\r\n            return llm.pipe(outputParser).withConfig({\r\n                runName: \"StructuredOutput\",\r\n            });\r\n        }\r\n        const parserAssign = RunnablePassthrough.assign({\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\r\n        });\r\n        const parserNone = RunnablePassthrough.assign({\r\n            parsed: () => null,\r\n        });\r\n        const parsedWithFallback = parserAssign.withFallbacks({\r\n            fallbacks: [parserNone],\r\n        });\r\n        return RunnableSequence.from([\r\n            {\r\n                raw: llm,\r\n            },\r\n            parsedWithFallback,\r\n        ]).withConfig({\r\n            runName: \"StructuredOutputRunnable\",\r\n        });\r\n    }\r\n}\r\n/**\r\n * An abstract class that extends BaseChatModel and provides a simple\r\n * implementation of _generate.\r\n */\r\nexport class SimpleChatModel extends BaseChatModel {\r\n    async _generate(messages, options, runManager) {\r\n        const text = await this._call(messages, options, runManager);\r\n        const message = new AIMessage(text);\r\n        if (typeof message.content !== \"string\") {\r\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\r\n        }\r\n        return {\r\n            generations: [\r\n                {\r\n                    text: message.content,\r\n                    message,\r\n                },\r\n            ],\r\n        };\r\n    }\r\n}\r\n", "export const VERSION = '0.5.0'; // x-release-please-version\r\n", "/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nimport { type RequestOptions } from '../core';\r\n\r\nexport interface Shims {\r\n  kind: string;\r\n  fetch: any;\r\n  Request: any;\r\n  Response: any;\r\n  Headers: any;\r\n  FormData: any;\r\n  Blob: any;\r\n  File: any;\r\n  ReadableStream: any;\r\n  getMultipartRequestOptions: <T = Record<string, unknown>>(\r\n    form: Shims['FormData'],\r\n    opts: RequestOptions<T>,\r\n  ) => Promise<RequestOptions<T>>;\r\n  getDefaultAgent: (url: string) => any;\r\n  fileFromPath:\r\n    | ((path: string, filename?: string, options?: {}) => Promise<Shims['File']>)\r\n    | ((path: string, options?: {}) => Promise<Shims['File']>);\r\n  isFsReadStream: (value: any) => boolean;\r\n}\r\n\r\nexport let auto = false;\r\nexport let kind: Shims['kind'] | undefined = undefined;\r\nexport let fetch: Shims['fetch'] | undefined = undefined;\r\nexport let Request: Shims['Request'] | undefined = undefined;\r\nexport let Response: Shims['Response'] | undefined = undefined;\r\nexport let Headers: Shims['Headers'] | undefined = undefined;\r\nexport let FormData: Shims['FormData'] | undefined = undefined;\r\nexport let Blob: Shims['Blob'] | undefined = undefined;\r\nexport let File: Shims['File'] | undefined = undefined;\r\nexport let ReadableStream: Shims['ReadableStream'] | undefined = undefined;\r\nexport let getMultipartRequestOptions: Shims['getMultipartRequestOptions'] | undefined = undefined;\r\nexport let getDefaultAgent: Shims['getDefaultAgent'] | undefined = undefined;\r\nexport let fileFromPath: Shims['fileFromPath'] | undefined = undefined;\r\nexport let isFsReadStream: Shims['isFsReadStream'] | undefined = undefined;\r\n\r\nexport function setShims(shims: Shims, options: { auto: boolean } = { auto: false }) {\r\n  if (auto) {\r\n    throw new Error(\r\n      `you must \\`import 'groq-sdk/shims/${shims.kind}'\\` before importing anything else from groq-sdk`,\r\n    );\r\n  }\r\n  if (kind) {\r\n    throw new Error(\r\n      `can't \\`import 'groq-sdk/shims/${shims.kind}'\\` after \\`import 'groq-sdk/shims/${kind}'\\``,\r\n    );\r\n  }\r\n  auto = options.auto;\r\n  kind = shims.kind;\r\n  fetch = shims.fetch;\r\n  Request = shims.Request;\r\n  Response = shims.Response;\r\n  Headers = shims.Headers;\r\n  FormData = shims.FormData;\r\n  Blob = shims.Blob;\r\n  File = shims.File;\r\n  ReadableStream = shims.ReadableStream;\r\n  getMultipartRequestOptions = shims.getMultipartRequestOptions;\r\n  getDefaultAgent = shims.getDefaultAgent;\r\n  fileFromPath = shims.fileFromPath;\r\n  isFsReadStream = shims.isFsReadStream;\r\n}\r\n", "/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nexport class MultipartBody {\r\n  constructor(public body: any) {}\r\n  get [Symbol.toStringTag](): string {\r\n    return 'MultipartBody';\r\n  }\r\n}\r\n", "/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nimport { MultipartBody } from './MultipartBody';\r\nimport { type RequestOptions } from '../core';\r\nimport { type Shims } from './registry';\r\n\r\nexport function getRuntime({ manuallyImported }: { manuallyImported?: boolean } = {}): Shims {\r\n  const recommendation =\r\n    manuallyImported ?\r\n      `You may need to use polyfills`\r\n    : `Add one of these imports before your first \\`import … from 'groq-sdk'\\`:\r\n- \\`import 'groq-sdk/shims/node'\\` (if you're running on Node)\r\n- \\`import 'groq-sdk/shims/web'\\` (otherwise)\r\n`;\r\n\r\n  let _fetch, _Request, _Response, _Headers;\r\n  try {\r\n    // @ts-ignore\r\n    _fetch = fetch;\r\n    // @ts-ignore\r\n    _Request = Request;\r\n    // @ts-ignore\r\n    _Response = Response;\r\n    // @ts-ignore\r\n    _Headers = Headers;\r\n  } catch (error) {\r\n    throw new Error(\r\n      `this environment is missing the following Web Fetch API type: ${\r\n        (error as any).message\r\n      }. ${recommendation}`,\r\n    );\r\n  }\r\n\r\n  return {\r\n    kind: 'web',\r\n    fetch: _fetch,\r\n    Request: _Request,\r\n    Response: _Response,\r\n    Headers: _Headers,\r\n    FormData:\r\n      // @ts-ignore\r\n      typeof FormData !== 'undefined' ? FormData : (\r\n        class FormData {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    Blob:\r\n      typeof Blob !== 'undefined' ? Blob : (\r\n        class Blob {\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    File:\r\n      // @ts-ignore\r\n      typeof File !== 'undefined' ? File : (\r\n        class File {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    ReadableStream:\r\n      // @ts-ignore\r\n      typeof ReadableStream !== 'undefined' ? ReadableStream : (\r\n        class ReadableStream {\r\n          // @ts-ignore\r\n          constructor() {\r\n            throw new Error(\r\n              `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`,\r\n            );\r\n          }\r\n        }\r\n      ),\r\n    getMultipartRequestOptions: async <T = Record<string, unknown>>(\r\n      // @ts-ignore\r\n      form: FormData,\r\n      opts: RequestOptions<T>,\r\n    ): Promise<RequestOptions<T>> => ({\r\n      ...opts,\r\n      body: new MultipartBody(form) as any,\r\n    }),\r\n    getDefaultAgent: (url: string) => undefined,\r\n    fileFromPath: () => {\r\n      throw new Error(\r\n        'The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads',\r\n      );\r\n    },\r\n    isFsReadStream: (value: any) => false,\r\n  };\r\n}\r\n", "/**\r\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\r\n */\r\nimport * as shims from './registry.mjs';\r\nimport * as auto from 'groq-sdk/_shims/auto/runtime';\r\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\r\nexport * from './registry.mjs';\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { castToError, Headers } from './core';\r\n\r\nexport class GroqError extends Error {}\r\n\r\nexport class APIError extends GroqError {\r\n  readonly status: number | undefined;\r\n  readonly headers: Headers | undefined;\r\n  readonly error: Object | undefined;\r\n\r\n  constructor(\r\n    status: number | undefined,\r\n    error: Object | undefined,\r\n    message: string | undefined,\r\n    headers: Headers | undefined,\r\n  ) {\r\n    super(`${APIError.makeMessage(status, error, message)}`);\r\n    this.status = status;\r\n    this.headers = headers;\r\n    this.error = error;\r\n  }\r\n\r\n  private static makeMessage(status: number | undefined, error: any, message: string | undefined) {\r\n    const msg =\r\n      error?.message ?\r\n        typeof error.message === 'string' ?\r\n          error.message\r\n        : JSON.stringify(error.message)\r\n      : error ? JSON.stringify(error)\r\n      : message;\r\n\r\n    if (status && msg) {\r\n      return `${status} ${msg}`;\r\n    }\r\n    if (status) {\r\n      return `${status} status code (no body)`;\r\n    }\r\n    if (msg) {\r\n      return msg;\r\n    }\r\n    return '(no status code or body)';\r\n  }\r\n\r\n  static generate(\r\n    status: number | undefined,\r\n    errorResponse: Object | undefined,\r\n    message: string | undefined,\r\n    headers: Headers | undefined,\r\n  ) {\r\n    if (!status) {\r\n      return new APIConnectionError({ cause: castToError(errorResponse) });\r\n    }\r\n\r\n    const error = errorResponse as Record<string, any>;\r\n\r\n    if (status === 400) {\r\n      return new BadRequestError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 401) {\r\n      return new AuthenticationError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 403) {\r\n      return new PermissionDeniedError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 404) {\r\n      return new NotFoundError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 409) {\r\n      return new ConflictError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 422) {\r\n      return new UnprocessableEntityError(status, error, message, headers);\r\n    }\r\n\r\n    if (status === 429) {\r\n      return new RateLimitError(status, error, message, headers);\r\n    }\r\n\r\n    if (status >= 500) {\r\n      return new InternalServerError(status, error, message, headers);\r\n    }\r\n\r\n    return new APIError(status, error, message, headers);\r\n  }\r\n}\r\n\r\nexport class APIUserAbortError extends APIError {\r\n  override readonly status: undefined = undefined;\r\n\r\n  constructor({ message }: { message?: string } = {}) {\r\n    super(undefined, undefined, message || 'Request was aborted.', undefined);\r\n  }\r\n}\r\n\r\nexport class APIConnectionError extends APIError {\r\n  override readonly status: undefined = undefined;\r\n\r\n  constructor({ message, cause }: { message?: string; cause?: Error | undefined }) {\r\n    super(undefined, undefined, message || 'Connection error.', undefined);\r\n    // in some environments the 'cause' property is already declared\r\n    // @ts-ignore\r\n    if (cause) this.cause = cause;\r\n  }\r\n}\r\n\r\nexport class APIConnectionTimeoutError extends APIConnectionError {\r\n  constructor({ message }: { message?: string } = {}) {\r\n    super({ message: message ?? 'Request timed out.' });\r\n  }\r\n}\r\n\r\nexport class BadRequestError extends APIError {\r\n  override readonly status: 400 = 400;\r\n}\r\n\r\nexport class AuthenticationError extends APIError {\r\n  override readonly status: 401 = 401;\r\n}\r\n\r\nexport class PermissionDeniedError extends APIError {\r\n  override readonly status: 403 = 403;\r\n}\r\n\r\nexport class NotFoundError extends APIError {\r\n  override readonly status: 404 = 404;\r\n}\r\n\r\nexport class ConflictError extends APIError {\r\n  override readonly status: 409 = 409;\r\n}\r\n\r\nexport class UnprocessableEntityError extends APIError {\r\n  override readonly status: 422 = 422;\r\n}\r\n\r\nexport class RateLimitError extends APIError {\r\n  override readonly status: 429 = 429;\r\n}\r\n\r\nexport class InternalServerError extends APIError {}\r\n", "import { ReadableStream, type Response } from '../_shims/index';\r\nimport { GroqError } from '../error';\r\n\r\nimport { APIError } from '../error';\r\n\r\ntype Bytes = string | ArrayBuffer | Uint8Array | Buffer | null | undefined;\r\n\r\nexport type ServerSentEvent = {\r\n  event: string | null;\r\n  data: string;\r\n  raw: string[];\r\n};\r\n\r\nexport class Stream<Item> implements AsyncIterable<Item> {\r\n  controller: AbortController;\r\n\r\n  constructor(\r\n    private iterator: () => AsyncIterator<Item>,\r\n    controller: AbortController,\r\n  ) {\r\n    this.controller = controller;\r\n  }\r\n\r\n  static fromSSEResponse<Item>(response: Response, controller: AbortController) {\r\n    let consumed = false;\r\n    const decoder = new SSEDecoder();\r\n\r\n    async function* iterMessages(): AsyncGenerator<ServerSentEvent, void, unknown> {\r\n      if (!response.body) {\r\n        controller.abort();\r\n        throw new GroqError(`Attempted to iterate over a response with no body`);\r\n      }\r\n\r\n      const lineDecoder = new LineDecoder();\r\n\r\n      const iter = readableStreamAsyncIterable<Bytes>(response.body);\r\n      for await (const chunk of iter) {\r\n        for (const line of lineDecoder.decode(chunk)) {\r\n          const sse = decoder.decode(line);\r\n          if (sse) yield sse;\r\n        }\r\n      }\r\n\r\n      for (const line of lineDecoder.flush()) {\r\n        const sse = decoder.decode(line);\r\n        if (sse) yield sse;\r\n      }\r\n    }\r\n\r\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\r\n      if (consumed) {\r\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\r\n      }\r\n      consumed = true;\r\n      let done = false;\r\n      try {\r\n        for await (const sse of iterMessages()) {\r\n          if (done) continue;\r\n\r\n          if (sse.data.startsWith('[DONE]')) {\r\n            done = true;\r\n            continue;\r\n          }\r\n\r\n          if (sse.event === null) {\r\n            let data;\r\n\r\n            try {\r\n              data = JSON.parse(sse.data);\r\n            } catch (e) {\r\n              console.error(`Could not parse message into JSON:`, sse.data);\r\n              console.error(`From chunk:`, sse.raw);\r\n              throw e;\r\n            }\r\n\r\n            if (data && data.error) {\r\n              throw new APIError(undefined, data.error, undefined, undefined);\r\n            }\r\n\r\n            yield data;\r\n          }\r\n        }\r\n        done = true;\r\n      } catch (e) {\r\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\r\n        if (e instanceof Error && e.name === 'AbortError') return;\r\n        throw e;\r\n      } finally {\r\n        // If the user `break`s, abort the ongoing request.\r\n        if (!done) controller.abort();\r\n      }\r\n    }\r\n\r\n    return new Stream(iterator, controller);\r\n  }\r\n\r\n  /**\r\n   * Generates a Stream from a newline-separated ReadableStream\r\n   * where each item is a JSON value.\r\n   */\r\n  static fromReadableStream<Item>(readableStream: ReadableStream, controller: AbortController) {\r\n    let consumed = false;\r\n\r\n    async function* iterLines(): AsyncGenerator<string, void, unknown> {\r\n      const lineDecoder = new LineDecoder();\r\n\r\n      const iter = readableStreamAsyncIterable<Bytes>(readableStream);\r\n      for await (const chunk of iter) {\r\n        for (const line of lineDecoder.decode(chunk)) {\r\n          yield line;\r\n        }\r\n      }\r\n\r\n      for (const line of lineDecoder.flush()) {\r\n        yield line;\r\n      }\r\n    }\r\n\r\n    async function* iterator(): AsyncIterator<Item, any, undefined> {\r\n      if (consumed) {\r\n        throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\r\n      }\r\n      consumed = true;\r\n      let done = false;\r\n      try {\r\n        for await (const line of iterLines()) {\r\n          if (done) continue;\r\n          if (line) yield JSON.parse(line);\r\n        }\r\n        done = true;\r\n      } catch (e) {\r\n        // If the user calls `stream.controller.abort()`, we should exit without throwing.\r\n        if (e instanceof Error && e.name === 'AbortError') return;\r\n        throw e;\r\n      } finally {\r\n        // If the user `break`s, abort the ongoing request.\r\n        if (!done) controller.abort();\r\n      }\r\n    }\r\n\r\n    return new Stream(iterator, controller);\r\n  }\r\n\r\n  [Symbol.asyncIterator](): AsyncIterator<Item> {\r\n    return this.iterator();\r\n  }\r\n\r\n  /**\r\n   * Splits the stream into two streams which can be\r\n   * independently read from at different speeds.\r\n   */\r\n  tee(): [Stream<Item>, Stream<Item>] {\r\n    const left: Array<Promise<IteratorResult<Item>>> = [];\r\n    const right: Array<Promise<IteratorResult<Item>>> = [];\r\n    const iterator = this.iterator();\r\n\r\n    const teeIterator = (queue: Array<Promise<IteratorResult<Item>>>): AsyncIterator<Item> => {\r\n      return {\r\n        next: () => {\r\n          if (queue.length === 0) {\r\n            const result = iterator.next();\r\n            left.push(result);\r\n            right.push(result);\r\n          }\r\n          return queue.shift()!;\r\n        },\r\n      };\r\n    };\r\n\r\n    return [\r\n      new Stream(() => teeIterator(left), this.controller),\r\n      new Stream(() => teeIterator(right), this.controller),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Converts this stream to a newline-separated ReadableStream of\r\n   * JSON stringified values in the stream\r\n   * which can be turned back into a Stream with `Stream.fromReadableStream()`.\r\n   */\r\n  toReadableStream(): ReadableStream {\r\n    const self = this;\r\n    let iter: AsyncIterator<Item>;\r\n    const encoder = new TextEncoder();\r\n\r\n    return new ReadableStream({\r\n      async start() {\r\n        iter = self[Symbol.asyncIterator]();\r\n      },\r\n      async pull(ctrl) {\r\n        try {\r\n          const { value, done } = await iter.next();\r\n          if (done) return ctrl.close();\r\n\r\n          const bytes = encoder.encode(JSON.stringify(value) + '\\n');\r\n\r\n          ctrl.enqueue(bytes);\r\n        } catch (err) {\r\n          ctrl.error(err);\r\n        }\r\n      },\r\n      async cancel() {\r\n        await iter.return?.();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nclass SSEDecoder {\r\n  private data: string[];\r\n  private event: string | null;\r\n  private chunks: string[];\r\n\r\n  constructor() {\r\n    this.event = null;\r\n    this.data = [];\r\n    this.chunks = [];\r\n  }\r\n\r\n  decode(line: string) {\r\n    if (line.endsWith('\\r')) {\r\n      line = line.substring(0, line.length - 1);\r\n    }\r\n\r\n    if (!line) {\r\n      // empty line and we didn't previously encounter any messages\r\n      if (!this.event && !this.data.length) return null;\r\n\r\n      const sse: ServerSentEvent = {\r\n        event: this.event,\r\n        data: this.data.join('\\n'),\r\n        raw: this.chunks,\r\n      };\r\n\r\n      this.event = null;\r\n      this.data = [];\r\n      this.chunks = [];\r\n\r\n      return sse;\r\n    }\r\n\r\n    this.chunks.push(line);\r\n\r\n    if (line.startsWith(':')) {\r\n      return null;\r\n    }\r\n\r\n    let [fieldname, _, value] = partition(line, ':');\r\n\r\n    if (value.startsWith(' ')) {\r\n      value = value.substring(1);\r\n    }\r\n\r\n    if (fieldname === 'event') {\r\n      this.event = value;\r\n    } else if (fieldname === 'data') {\r\n      this.data.push(value);\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\r\n * reading lines from text.\r\n *\r\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\r\n */\r\nclass LineDecoder {\r\n  // prettier-ignore\r\n  static NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', '\\u2028', '\\u2029']);\r\n  static NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\r\n\r\n  buffer: string[];\r\n  trailingCR: boolean;\r\n  textDecoder: any; // TextDecoder found in browsers; not typed to avoid pulling in either \"dom\" or \"node\" types.\r\n\r\n  constructor() {\r\n    this.buffer = [];\r\n    this.trailingCR = false;\r\n  }\r\n\r\n  decode(chunk: Bytes): string[] {\r\n    let text = this.decodeText(chunk);\r\n\r\n    if (this.trailingCR) {\r\n      text = '\\r' + text;\r\n      this.trailingCR = false;\r\n    }\r\n    if (text.endsWith('\\r')) {\r\n      this.trailingCR = true;\r\n      text = text.slice(0, -1);\r\n    }\r\n\r\n    if (!text) {\r\n      return [];\r\n    }\r\n\r\n    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\r\n    let lines = text.split(LineDecoder.NEWLINE_REGEXP);\r\n\r\n    if (lines.length === 1 && !trailingNewline) {\r\n      this.buffer.push(lines[0]!);\r\n      return [];\r\n    }\r\n\r\n    if (this.buffer.length > 0) {\r\n      lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\r\n      this.buffer = [];\r\n    }\r\n\r\n    if (!trailingNewline) {\r\n      this.buffer = [lines.pop() || ''];\r\n    }\r\n\r\n    return lines;\r\n  }\r\n\r\n  decodeText(bytes: Bytes): string {\r\n    if (bytes == null) return '';\r\n    if (typeof bytes === 'string') return bytes;\r\n\r\n    // Node:\r\n    if (typeof Buffer !== 'undefined') {\r\n      if (bytes instanceof Buffer) {\r\n        return bytes.toString();\r\n      }\r\n      if (bytes instanceof Uint8Array) {\r\n        return Buffer.from(bytes).toString();\r\n      }\r\n\r\n      throw new GroqError(\r\n        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`,\r\n      );\r\n    }\r\n\r\n    // Browser\r\n    if (typeof TextDecoder !== 'undefined') {\r\n      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\r\n        this.textDecoder ??= new TextDecoder('utf8');\r\n        return this.textDecoder.decode(bytes);\r\n      }\r\n\r\n      throw new GroqError(\r\n        `Unexpected: received non-Uint8Array/ArrayBuffer (${\r\n          (bytes as any).constructor.name\r\n        }) in a web platform. Please report this error.`,\r\n      );\r\n    }\r\n\r\n    throw new GroqError(\r\n      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`,\r\n    );\r\n  }\r\n\r\n  flush(): string[] {\r\n    if (!this.buffer.length && !this.trailingCR) {\r\n      return [];\r\n    }\r\n\r\n    const lines = [this.buffer.join('')];\r\n    this.buffer = [];\r\n    this.trailingCR = false;\r\n    return lines;\r\n  }\r\n}\r\n\r\nfunction partition(str: string, delimiter: string): [string, string, string] {\r\n  const index = str.indexOf(delimiter);\r\n  if (index !== -1) {\r\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\r\n  }\r\n\r\n  return [str, '', ''];\r\n}\r\n\r\n/**\r\n * Most browsers don't yet have async iterable support for ReadableStream,\r\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\r\n *\r\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\r\n */\r\nexport function readableStreamAsyncIterable<T>(stream: any): AsyncIterableIterator<T> {\r\n  if (stream[Symbol.asyncIterator]) return stream;\r\n\r\n  const reader = stream.getReader();\r\n  return {\r\n    async next() {\r\n      try {\r\n        const result = await reader.read();\r\n        if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\r\n        return result;\r\n      } catch (e) {\r\n        reader.releaseLock(); // release lock when stream becomes errored\r\n        throw e;\r\n      }\r\n    },\r\n    async return() {\r\n      const cancelPromise = reader.cancel();\r\n      reader.releaseLock();\r\n      await cancelPromise;\r\n      return { done: true, value: undefined };\r\n    },\r\n    [Symbol.asyncIterator]() {\r\n      return this;\r\n    },\r\n  };\r\n}\r\n", "import { type RequestOptions } from './core';\r\nimport {\r\n  FormData,\r\n  File,\r\n  type Blob,\r\n  type FilePropertyBag,\r\n  getMultipartRequestOptions,\r\n  type FsReadStream,\r\n  isFsReadStream,\r\n} from './_shims/index';\r\nimport { MultipartBody } from './_shims/MultipartBody';\r\nexport { fileFromPath } from './_shims/index';\r\n\r\ntype BlobLikePart = string | ArrayBuffer | ArrayBufferView | BlobLike | Uint8Array | DataView;\r\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | Uint8Array | DataView;\r\n\r\n/**\r\n * Typically, this is a native \"File\" class.\r\n *\r\n * We provide the {@link toFile} utility to convert a variety of objects\r\n * into the File class.\r\n *\r\n * For convenience, you can also pass a fetch Response, or in Node,\r\n * the result of fs.createReadStream().\r\n */\r\nexport type Uploadable = FileLike | ResponseLike | FsReadStream;\r\n\r\n/**\r\n * Intended to match web.Blob, node.Blob, node-fetch.Blob, etc.\r\n */\r\nexport interface BlobLike {\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size) */\r\n  readonly size: number;\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type) */\r\n  readonly type: string;\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text) */\r\n  text(): Promise<string>;\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice) */\r\n  slice(start?: number, end?: number): BlobLike;\r\n  // unfortunately @types/node-fetch@^2.6.4 doesn't type the arrayBuffer method\r\n}\r\n\r\n/**\r\n * Intended to match web.File, node.File, node-fetch.File, etc.\r\n */\r\nexport interface FileLike extends BlobLike {\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified) */\r\n  readonly lastModified: number;\r\n  /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name) */\r\n  readonly name: string;\r\n}\r\n\r\n/**\r\n * Intended to match web.Response, node.Response, node-fetch.Response, etc.\r\n */\r\nexport interface ResponseLike {\r\n  url: string;\r\n  blob(): Promise<BlobLike>;\r\n}\r\n\r\nexport const isResponseLike = (value: any): value is ResponseLike =>\r\n  value != null &&\r\n  typeof value === 'object' &&\r\n  typeof value.url === 'string' &&\r\n  typeof value.blob === 'function';\r\n\r\nexport const isFileLike = (value: any): value is FileLike =>\r\n  value != null &&\r\n  typeof value === 'object' &&\r\n  typeof value.name === 'string' &&\r\n  typeof value.lastModified === 'number' &&\r\n  isBlobLike(value);\r\n\r\n/**\r\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\r\n * adds the arrayBuffer() method type because it is available and used at runtime\r\n */\r\nexport const isBlobLike = (value: any): value is BlobLike & { arrayBuffer(): Promise<ArrayBuffer> } =>\r\n  value != null &&\r\n  typeof value === 'object' &&\r\n  typeof value.size === 'number' &&\r\n  typeof value.type === 'string' &&\r\n  typeof value.text === 'function' &&\r\n  typeof value.slice === 'function' &&\r\n  typeof value.arrayBuffer === 'function';\r\n\r\nexport const isUploadable = (value: any): value is Uploadable => {\r\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\r\n};\r\n\r\nexport type ToFileInput = Uploadable | Exclude<BlobLikePart, string> | AsyncIterable<BlobLikePart>;\r\n\r\n/**\r\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\r\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\r\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\r\n * @param {Object=} options additional properties\r\n * @param {string=} options.type the MIME type of the content\r\n * @param {number=} options.lastModified the last modified timestamp\r\n * @returns a {@link File} with the given properties\r\n */\r\nexport async function toFile(\r\n  value: ToFileInput | PromiseLike<ToFileInput>,\r\n  name?: string | null | undefined,\r\n  options?: FilePropertyBag | undefined,\r\n): Promise<FileLike> {\r\n  // If it's a promise, resolve it.\r\n  value = await value;\r\n\r\n  // Use the file's options if there isn't one provided\r\n  options ??= isFileLike(value) ? { lastModified: value.lastModified, type: value.type } : {};\r\n\r\n  if (isResponseLike(value)) {\r\n    const blob = await value.blob();\r\n    name ||= new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? 'unknown_file';\r\n\r\n    return new File([blob as any], name, options);\r\n  }\r\n\r\n  const bits = await getBytes(value);\r\n\r\n  name ||= getName(value) ?? 'unknown_file';\r\n\r\n  if (!options.type) {\r\n    const type = (bits[0] as any)?.type;\r\n    if (typeof type === 'string') {\r\n      options = { ...options, type };\r\n    }\r\n  }\r\n\r\n  return new File(bits, name, options);\r\n}\r\n\r\nasync function getBytes(value: ToFileInput): Promise<Array<BlobPart>> {\r\n  let parts: Array<BlobPart> = [];\r\n  if (\r\n    typeof value === 'string' ||\r\n    ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\r\n    value instanceof ArrayBuffer\r\n  ) {\r\n    parts.push(value);\r\n  } else if (isBlobLike(value)) {\r\n    parts.push(await value.arrayBuffer());\r\n  } else if (\r\n    isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\r\n  ) {\r\n    for await (const chunk of value) {\r\n      parts.push(chunk as BlobPart); // TODO, consider validating?\r\n    }\r\n  } else {\r\n    throw new Error(\r\n      `Unexpected data type: ${typeof value}; constructor: ${value?.constructor\r\n        ?.name}; props: ${propsForError(value)}`,\r\n    );\r\n  }\r\n\r\n  return parts;\r\n}\r\n\r\nfunction propsForError(value: any): string {\r\n  const props = Object.getOwnPropertyNames(value);\r\n  return `[${props.map((p) => `\"${p}\"`).join(', ')}]`;\r\n}\r\n\r\nfunction getName(value: any): string | undefined {\r\n  return (\r\n    getStringFromMaybeBuffer(value.name) ||\r\n    getStringFromMaybeBuffer(value.filename) ||\r\n    // For fs.ReadStream\r\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop()\r\n  );\r\n}\r\n\r\nconst getStringFromMaybeBuffer = (x: string | Buffer | unknown): string | undefined => {\r\n  if (typeof x === 'string') return x;\r\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\r\n  return undefined;\r\n};\r\n\r\nconst isAsyncIterableIterator = (value: any): value is AsyncIterableIterator<unknown> =>\r\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\r\n\r\nexport const isMultipartBody = (body: any): body is MultipartBody =>\r\n  body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\r\n\r\n/**\r\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\r\n * Otherwise returns the request as is.\r\n */\r\nexport const maybeMultipartFormRequestOptions = async <T = Record<string, unknown>>(\r\n  opts: RequestOptions<T>,\r\n): Promise<RequestOptions<T | MultipartBody>> => {\r\n  if (!hasUploadableValue(opts.body)) return opts;\r\n\r\n  const form = await createForm(opts.body);\r\n  return getMultipartRequestOptions(form, opts);\r\n};\r\n\r\nexport const multipartFormRequestOptions = async <T = Record<string, unknown>>(\r\n  opts: RequestOptions<T>,\r\n): Promise<RequestOptions<T | MultipartBody>> => {\r\n  const form = await createForm(opts.body);\r\n  return getMultipartRequestOptions(form, opts);\r\n};\r\n\r\nexport const createForm = async <T = Record<string, unknown>>(body: T | undefined): Promise<FormData> => {\r\n  const form = new FormData();\r\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\r\n  return form;\r\n};\r\n\r\nconst hasUploadableValue = (value: unknown): boolean => {\r\n  if (isUploadable(value)) return true;\r\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\r\n  if (value && typeof value === 'object') {\r\n    for (const k in value) {\r\n      if (hasUploadableValue((value as any)[k])) return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\r\n  if (value === undefined) return;\r\n  if (value == null) {\r\n    throw new TypeError(\r\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\r\n    );\r\n  }\r\n\r\n  // TODO: make nested formats configurable\r\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n    form.append(key, String(value));\r\n  } else if (isUploadable(value)) {\r\n    const file = await toFile(value);\r\n    form.append(key, file as File);\r\n  } else if (Array.isArray(value)) {\r\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\r\n  } else if (typeof value === 'object') {\r\n    await Promise.all(\r\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\r\n    );\r\n  } else {\r\n    throw new TypeError(\r\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\r\n    );\r\n  }\r\n};\r\n", "import { VERSION } from './version';\r\nimport { Stream } from './lib/streaming';\r\nimport {\r\n  GroqError,\r\n  APIError,\r\n  APIConnectionError,\r\n  APIConnectionTimeoutError,\r\n  APIUserAbortError,\r\n} from './error';\r\nimport {\r\n  kind as shimsKind,\r\n  type Readable,\r\n  getDefaultAgent,\r\n  type Agent,\r\n  fetch,\r\n  type RequestInfo,\r\n  type RequestInit,\r\n  type Response,\r\n  type HeadersInit,\r\n} from './_shims/index';\r\nexport { type Response };\r\nimport { BlobLike, isBlobLike, isMultipartBody } from './uploads';\r\nexport {\r\n  maybeMultipartFormRequestOptions,\r\n  multipartFormRequestOptions,\r\n  createForm,\r\n  type Uploadable,\r\n} from './uploads';\r\n\r\nexport type Fetch = (url: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n\r\ntype PromiseOrValue<T> = T | Promise<T>;\r\n\r\ntype APIResponseProps = {\r\n  response: Response;\r\n  options: FinalRequestOptions;\r\n  controller: AbortController;\r\n};\r\n\r\nasync function defaultParseResponse<T>(props: APIResponseProps): Promise<T> {\r\n  const { response } = props;\r\n  if (props.options.stream) {\r\n    debug('response', response.status, response.url, response.headers, response.body);\r\n\r\n    // Note: there is an invariant here that isn't represented in the type system\r\n    // that if you set `stream: true` the response type must also be `Stream<T>`\r\n\r\n    if (props.options.__streamClass) {\r\n      return props.options.__streamClass.fromSSEResponse(response, props.controller) as any;\r\n    }\r\n\r\n    return Stream.fromSSEResponse(response, props.controller) as any;\r\n  }\r\n\r\n  // fetch refuses to read the body when the status code is 204.\r\n  if (response.status === 204) {\r\n    return null as T;\r\n  }\r\n\r\n  if (props.options.__binaryResponse) {\r\n    return response as unknown as T;\r\n  }\r\n\r\n  const contentType = response.headers.get('content-type');\r\n  const isJSON =\r\n    contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\r\n  if (isJSON) {\r\n    const json = await response.json();\r\n\r\n    debug('response', response.status, response.url, response.headers, json);\r\n\r\n    return json as T;\r\n  }\r\n\r\n  const text = await response.text();\r\n  debug('response', response.status, response.url, response.headers, text);\r\n\r\n  // TODO handle blob, arraybuffer, other content types, etc.\r\n  return text as unknown as T;\r\n}\r\n\r\n/**\r\n * A subclass of `Promise` providing additional helper methods\r\n * for interacting with the SDK.\r\n */\r\nexport class APIPromise<T> extends Promise<T> {\r\n  private parsedPromise: Promise<T> | undefined;\r\n\r\n  constructor(\r\n    private responsePromise: Promise<APIResponseProps>,\r\n    private parseResponse: (props: APIResponseProps) => PromiseOrValue<T> = defaultParseResponse,\r\n  ) {\r\n    super((resolve) => {\r\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\r\n      // parse the response body; instead .then, .catch, .finally are overridden\r\n      // to parse the response\r\n      resolve(null as any);\r\n    });\r\n  }\r\n\r\n  _thenUnwrap<U>(transform: (data: T) => U): APIPromise<U> {\r\n    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\r\n  }\r\n\r\n  /**\r\n   * Gets the raw `Response` instance instead of parsing the response\r\n   * data.\r\n   *\r\n   * If you want to parse the response body but still get the `Response`\r\n   * instance, you can use {@link withResponse()}.\r\n   *\r\n   * 👋 Getting the wrong TypeScript type for `Response`?\r\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\r\n   * or add one of these imports before your first `import … from 'groq-sdk'`:\r\n   * - `import 'groq-sdk/shims/node'` (if you're running on Node)\r\n   * - `import 'groq-sdk/shims/web'` (otherwise)\r\n   */\r\n  asResponse(): Promise<Response> {\r\n    return this.responsePromise.then((p) => p.response);\r\n  }\r\n  /**\r\n   * Gets the parsed response data and the raw `Response` instance.\r\n   *\r\n   * If you just want to get the raw `Response` instance without parsing it,\r\n   * you can use {@link asResponse()}.\r\n   *\r\n   *\r\n   * 👋 Getting the wrong TypeScript type for `Response`?\r\n   * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\r\n   * or add one of these imports before your first `import … from 'groq-sdk'`:\r\n   * - `import 'groq-sdk/shims/node'` (if you're running on Node)\r\n   * - `import 'groq-sdk/shims/web'` (otherwise)\r\n   */\r\n  async withResponse(): Promise<{ data: T; response: Response }> {\r\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\r\n    return { data, response };\r\n  }\r\n\r\n  private parse(): Promise<T> {\r\n    if (!this.parsedPromise) {\r\n      this.parsedPromise = this.responsePromise.then(this.parseResponse);\r\n    }\r\n    return this.parsedPromise;\r\n  }\r\n\r\n  override then<TResult1 = T, TResult2 = never>(\r\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,\r\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\r\n  ): Promise<TResult1 | TResult2> {\r\n    return this.parse().then(onfulfilled, onrejected);\r\n  }\r\n\r\n  override catch<TResult = never>(\r\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\r\n  ): Promise<T | TResult> {\r\n    return this.parse().catch(onrejected);\r\n  }\r\n\r\n  override finally(onfinally?: (() => void) | undefined | null): Promise<T> {\r\n    return this.parse().finally(onfinally);\r\n  }\r\n}\r\n\r\nexport abstract class APIClient {\r\n  baseURL: string;\r\n  maxRetries: number;\r\n  timeout: number;\r\n  httpAgent: Agent | undefined;\r\n\r\n  private fetch: Fetch;\r\n  protected idempotencyHeader?: string;\r\n\r\n  constructor({\r\n    baseURL,\r\n    maxRetries = 2,\r\n    timeout = 60000, // 1 minute\r\n    httpAgent,\r\n    fetch: overridenFetch,\r\n  }: {\r\n    baseURL: string;\r\n    maxRetries?: number | undefined;\r\n    timeout: number | undefined;\r\n    httpAgent: Agent | undefined;\r\n    fetch: Fetch | undefined;\r\n  }) {\r\n    this.baseURL = baseURL;\r\n    this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\r\n    this.timeout = validatePositiveInteger('timeout', timeout);\r\n    this.httpAgent = httpAgent;\r\n\r\n    this.fetch = overridenFetch ?? fetch;\r\n  }\r\n\r\n  protected authHeaders(opts: FinalRequestOptions): Headers {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Override this to add your own default headers, for example:\r\n   *\r\n   *  {\r\n   *    ...super.defaultHeaders(),\r\n   *    Authorization: 'Bearer 123',\r\n   *  }\r\n   */\r\n  protected defaultHeaders(opts: FinalRequestOptions): Headers {\r\n    return {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'User-Agent': this.getUserAgent(),\r\n      ...getPlatformHeaders(),\r\n      ...this.authHeaders(opts),\r\n    };\r\n  }\r\n\r\n  protected abstract defaultQuery(): DefaultQuery | undefined;\r\n\r\n  /**\r\n   * Override this to add your own headers validation:\r\n   */\r\n  protected validateHeaders(headers: Headers, customHeaders: Headers) {}\r\n\r\n  protected defaultIdempotencyKey(): string {\r\n    return `stainless-node-retry-${uuid4()}`;\r\n  }\r\n\r\n  get<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\r\n    return this.methodRequest('get', path, opts);\r\n  }\r\n\r\n  post<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\r\n    return this.methodRequest('post', path, opts);\r\n  }\r\n\r\n  patch<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\r\n    return this.methodRequest('patch', path, opts);\r\n  }\r\n\r\n  put<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\r\n    return this.methodRequest('put', path, opts);\r\n  }\r\n\r\n  delete<Req, Rsp>(path: string, opts?: PromiseOrValue<RequestOptions<Req>>): APIPromise<Rsp> {\r\n    return this.methodRequest('delete', path, opts);\r\n  }\r\n\r\n  private methodRequest<Req, Rsp>(\r\n    method: HTTPMethod,\r\n    path: string,\r\n    opts?: PromiseOrValue<RequestOptions<Req>>,\r\n  ): APIPromise<Rsp> {\r\n    return this.request(\r\n      Promise.resolve(opts).then(async (opts) => {\r\n        const body =\r\n          opts && isBlobLike(opts?.body) ? new DataView(await opts.body.arrayBuffer())\r\n          : opts?.body instanceof DataView ? opts.body\r\n          : opts?.body instanceof ArrayBuffer ? new DataView(opts.body)\r\n          : opts && ArrayBuffer.isView(opts?.body) ? new DataView(opts.body.buffer)\r\n          : opts?.body;\r\n        return { method, path, ...opts, body };\r\n      }),\r\n    );\r\n  }\r\n\r\n  getAPIList<Item, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\r\n    path: string,\r\n    Page: new (...args: any[]) => PageClass,\r\n    opts?: RequestOptions<any>,\r\n  ): PagePromise<PageClass, Item> {\r\n    return this.requestAPIList(Page, { method: 'get', path, ...opts });\r\n  }\r\n\r\n  private calculateContentLength(body: unknown): string | null {\r\n    if (typeof body === 'string') {\r\n      if (typeof Buffer !== 'undefined') {\r\n        return Buffer.byteLength(body, 'utf8').toString();\r\n      }\r\n\r\n      if (typeof TextEncoder !== 'undefined') {\r\n        const encoder = new TextEncoder();\r\n        const encoded = encoder.encode(body);\r\n        return encoded.length.toString();\r\n      }\r\n    } else if (ArrayBuffer.isView(body)) {\r\n      return body.byteLength.toString();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  buildRequest<Req>(options: FinalRequestOptions<Req>): { req: RequestInit; url: string; timeout: number } {\r\n    const { method, path, query, headers: headers = {} } = options;\r\n\r\n    const body =\r\n      ArrayBuffer.isView(options.body) || (options.__binaryRequest && typeof options.body === 'string') ?\r\n        options.body\r\n      : isMultipartBody(options.body) ? options.body.body\r\n      : options.body ? JSON.stringify(options.body, null, 2)\r\n      : null;\r\n    const contentLength = this.calculateContentLength(body);\r\n\r\n    const url = this.buildURL(path!, query);\r\n    if ('timeout' in options) validatePositiveInteger('timeout', options.timeout);\r\n    const timeout = options.timeout ?? this.timeout;\r\n    const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\r\n    const minAgentTimeout = timeout + 1000;\r\n    if (\r\n      typeof (httpAgent as any)?.options?.timeout === 'number' &&\r\n      minAgentTimeout > ((httpAgent as any).options.timeout ?? 0)\r\n    ) {\r\n      // Allow any given request to bump our agent active socket timeout.\r\n      // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\r\n      // and without mutating agent we would need to create more of them.\r\n      // This tradeoff optimizes for performance.\r\n      (httpAgent as any).options.timeout = minAgentTimeout;\r\n    }\r\n\r\n    if (this.idempotencyHeader && method !== 'get') {\r\n      if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\r\n      headers[this.idempotencyHeader] = options.idempotencyKey;\r\n    }\r\n\r\n    const reqHeaders = this.buildHeaders({ options, headers, contentLength });\r\n\r\n    const req: RequestInit = {\r\n      method,\r\n      ...(body && { body: body as any }),\r\n      headers: reqHeaders,\r\n      ...(httpAgent && { agent: httpAgent }),\r\n      // @ts-ignore node-fetch uses a custom AbortSignal type that is\r\n      // not compatible with standard web types\r\n      signal: options.signal ?? null,\r\n    };\r\n\r\n    return { req, url, timeout };\r\n  }\r\n\r\n  private buildHeaders({\r\n    options,\r\n    headers,\r\n    contentLength,\r\n  }: {\r\n    options: FinalRequestOptions;\r\n    headers: Record<string, string | null | undefined>;\r\n    contentLength: string | null | undefined;\r\n  }): Record<string, string> {\r\n    const reqHeaders: Record<string, string> = {};\r\n    if (contentLength) {\r\n      reqHeaders['content-length'] = contentLength;\r\n    }\r\n\r\n    const defaultHeaders = this.defaultHeaders(options);\r\n    applyHeadersMut(reqHeaders, defaultHeaders);\r\n    applyHeadersMut(reqHeaders, headers);\r\n\r\n    // let builtin fetch set the Content-Type for multipart bodies\r\n    if (isMultipartBody(options.body) && shimsKind !== 'node') {\r\n      delete reqHeaders['content-type'];\r\n    }\r\n\r\n    this.validateHeaders(reqHeaders, headers);\r\n\r\n    return reqHeaders;\r\n  }\r\n\r\n  /**\r\n   * Used as a callback for mutating the given `FinalRequestOptions` object.\r\n   */\r\n  protected async prepareOptions(options: FinalRequestOptions): Promise<void> {}\r\n\r\n  /**\r\n   * Used as a callback for mutating the given `RequestInit` object.\r\n   *\r\n   * This is useful for cases where you want to add certain headers based off of\r\n   * the request properties, e.g. `method` or `url`.\r\n   */\r\n  protected async prepareRequest(\r\n    request: RequestInit,\r\n    { url, options }: { url: string; options: FinalRequestOptions },\r\n  ): Promise<void> {}\r\n\r\n  protected parseHeaders(headers: HeadersInit | null | undefined): Record<string, string> {\r\n    return (\r\n      !headers ? {}\r\n      : Symbol.iterator in headers ?\r\n        Object.fromEntries(Array.from(headers as Iterable<string[]>).map((header) => [...header]))\r\n      : { ...headers }\r\n    );\r\n  }\r\n\r\n  protected makeStatusError(\r\n    status: number | undefined,\r\n    error: Object | undefined,\r\n    message: string | undefined,\r\n    headers: Headers | undefined,\r\n  ) {\r\n    return APIError.generate(status, error, message, headers);\r\n  }\r\n\r\n  request<Req, Rsp>(\r\n    options: PromiseOrValue<FinalRequestOptions<Req>>,\r\n    remainingRetries: number | null = null,\r\n  ): APIPromise<Rsp> {\r\n    return new APIPromise(this.makeRequest(options, remainingRetries));\r\n  }\r\n\r\n  private async makeRequest<Req>(\r\n    optionsInput: PromiseOrValue<FinalRequestOptions<Req>>,\r\n    retriesRemaining: number | null,\r\n  ): Promise<APIResponseProps> {\r\n    const options = await optionsInput;\r\n    if (retriesRemaining == null) {\r\n      retriesRemaining = options.maxRetries ?? this.maxRetries;\r\n    }\r\n\r\n    await this.prepareOptions(options);\r\n\r\n    const { req, url, timeout } = this.buildRequest(options);\r\n\r\n    await this.prepareRequest(req, { url, options });\r\n\r\n    debug('request', url, options, req.headers);\r\n\r\n    if (options.signal?.aborted) {\r\n      throw new APIUserAbortError();\r\n    }\r\n\r\n    const controller = new AbortController();\r\n    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\r\n\r\n    if (response instanceof Error) {\r\n      if (options.signal?.aborted) {\r\n        throw new APIUserAbortError();\r\n      }\r\n      if (retriesRemaining) {\r\n        return this.retryRequest(options, retriesRemaining);\r\n      }\r\n      if (response.name === 'AbortError') {\r\n        throw new APIConnectionTimeoutError();\r\n      }\r\n      throw new APIConnectionError({ cause: response });\r\n    }\r\n\r\n    const responseHeaders = createResponseHeaders(response.headers);\r\n\r\n    if (!response.ok) {\r\n      if (retriesRemaining && this.shouldRetry(response)) {\r\n        const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\r\n        debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\r\n        return this.retryRequest(options, retriesRemaining, responseHeaders);\r\n      }\r\n\r\n      const errText = await response.text().catch((e) => castToError(e).message);\r\n      const errJSON = safeJSON(errText);\r\n      const errMessage = errJSON ? undefined : errText;\r\n      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\r\n\r\n      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\r\n\r\n      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\r\n      throw err;\r\n    }\r\n\r\n    return { response, options, controller };\r\n  }\r\n\r\n  requestAPIList<Item = unknown, PageClass extends AbstractPage<Item> = AbstractPage<Item>>(\r\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\r\n    options: FinalRequestOptions,\r\n  ): PagePromise<PageClass, Item> {\r\n    const request = this.makeRequest(options, null);\r\n    return new PagePromise<PageClass, Item>(this, request, Page);\r\n  }\r\n\r\n  buildURL<Req>(path: string, query: Req | null | undefined): string {\r\n    const url =\r\n      isAbsoluteURL(path) ?\r\n        new URL(path)\r\n      : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\r\n\r\n    const defaultQuery = this.defaultQuery();\r\n    if (!isEmptyObj(defaultQuery)) {\r\n      query = { ...defaultQuery, ...query } as Req;\r\n    }\r\n\r\n    if (typeof query === 'object' && query && !Array.isArray(query)) {\r\n      url.search = this.stringifyQuery(query as Record<string, unknown>);\r\n    }\r\n\r\n    return url.toString();\r\n  }\r\n\r\n  protected stringifyQuery(query: Record<string, unknown>): string {\r\n    return Object.entries(query)\r\n      .filter(([_, value]) => typeof value !== 'undefined')\r\n      .map(([key, value]) => {\r\n        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\r\n        }\r\n        if (value === null) {\r\n          return `${encodeURIComponent(key)}=`;\r\n        }\r\n        throw new GroqError(\r\n          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`,\r\n        );\r\n      })\r\n      .join('&');\r\n  }\r\n\r\n  async fetchWithTimeout(\r\n    url: RequestInfo,\r\n    init: RequestInit | undefined,\r\n    ms: number,\r\n    controller: AbortController,\r\n  ): Promise<Response> {\r\n    const { signal, ...options } = init || {};\r\n    if (signal) signal.addEventListener('abort', () => controller.abort());\r\n\r\n    const timeout = setTimeout(() => controller.abort(), ms);\r\n\r\n    return (\r\n      this.getRequestClient()\r\n        // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\r\n        .fetch.call(undefined, url, { signal: controller.signal as any, ...options })\r\n        .finally(() => {\r\n          clearTimeout(timeout);\r\n        })\r\n    );\r\n  }\r\n\r\n  protected getRequestClient(): RequestClient {\r\n    return { fetch: this.fetch };\r\n  }\r\n\r\n  private shouldRetry(response: Response): boolean {\r\n    // Note this is not a standard header.\r\n    const shouldRetryHeader = response.headers.get('x-should-retry');\r\n\r\n    // If the server explicitly says whether or not to retry, obey.\r\n    if (shouldRetryHeader === 'true') return true;\r\n    if (shouldRetryHeader === 'false') return false;\r\n\r\n    // Retry on request timeouts.\r\n    if (response.status === 408) return true;\r\n\r\n    // Retry on lock timeouts.\r\n    if (response.status === 409) return true;\r\n\r\n    // Retry on rate limits.\r\n    if (response.status === 429) return true;\r\n\r\n    // Retry internal errors.\r\n    if (response.status >= 500) return true;\r\n\r\n    return false;\r\n  }\r\n\r\n  private async retryRequest(\r\n    options: FinalRequestOptions,\r\n    retriesRemaining: number,\r\n    responseHeaders?: Headers | undefined,\r\n  ): Promise<APIResponseProps> {\r\n    let timeoutMillis: number | undefined;\r\n\r\n    // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\r\n    const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\r\n    if (retryAfterMillisHeader) {\r\n      const timeoutMs = parseFloat(retryAfterMillisHeader);\r\n      if (!Number.isNaN(timeoutMs)) {\r\n        timeoutMillis = timeoutMs;\r\n      }\r\n    }\r\n\r\n    // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\r\n    const retryAfterHeader = responseHeaders?.['retry-after'];\r\n    if (retryAfterHeader && !timeoutMillis) {\r\n      const timeoutSeconds = parseFloat(retryAfterHeader);\r\n      if (!Number.isNaN(timeoutSeconds)) {\r\n        timeoutMillis = timeoutSeconds * 1000;\r\n      } else {\r\n        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\r\n      }\r\n    }\r\n\r\n    // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\r\n    // just do what it says, but otherwise calculate a default\r\n    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\r\n      const maxRetries = options.maxRetries ?? this.maxRetries;\r\n      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\r\n    }\r\n    await sleep(timeoutMillis);\r\n\r\n    return this.makeRequest(options, retriesRemaining - 1);\r\n  }\r\n\r\n  private calculateDefaultRetryTimeoutMillis(retriesRemaining: number, maxRetries: number): number {\r\n    const initialRetryDelay = 0.5;\r\n    const maxRetryDelay = 8.0;\r\n\r\n    const numRetries = maxRetries - retriesRemaining;\r\n\r\n    // Apply exponential backoff, but not more than the max.\r\n    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\r\n\r\n    // Apply some jitter, take up to at most 25 percent of the retry time.\r\n    const jitter = 1 - Math.random() * 0.25;\r\n\r\n    return sleepSeconds * jitter * 1000;\r\n  }\r\n\r\n  private getUserAgent(): string {\r\n    return `${this.constructor.name}/JS ${VERSION}`;\r\n  }\r\n}\r\n\r\nexport type PageInfo = { url: URL } | { params: Record<string, unknown> | null };\r\n\r\nexport abstract class AbstractPage<Item> implements AsyncIterable<Item> {\r\n  #client: APIClient;\r\n  protected options: FinalRequestOptions;\r\n\r\n  protected response: Response;\r\n  protected body: unknown;\r\n\r\n  constructor(client: APIClient, response: Response, body: unknown, options: FinalRequestOptions) {\r\n    this.#client = client;\r\n    this.options = options;\r\n    this.response = response;\r\n    this.body = body;\r\n  }\r\n\r\n  /**\r\n   * @deprecated Use nextPageInfo instead\r\n   */\r\n  abstract nextPageParams(): Partial<Record<string, unknown>> | null;\r\n  abstract nextPageInfo(): PageInfo | null;\r\n\r\n  abstract getPaginatedItems(): Item[];\r\n\r\n  hasNextPage(): boolean {\r\n    const items = this.getPaginatedItems();\r\n    if (!items.length) return false;\r\n    return this.nextPageInfo() != null;\r\n  }\r\n\r\n  async getNextPage(): Promise<this> {\r\n    const nextInfo = this.nextPageInfo();\r\n    if (!nextInfo) {\r\n      throw new GroqError(\r\n        'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.',\r\n      );\r\n    }\r\n    const nextOptions = { ...this.options };\r\n    if ('params' in nextInfo && typeof nextOptions.query === 'object') {\r\n      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\r\n    } else if ('url' in nextInfo) {\r\n      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\r\n      for (const [key, value] of params) {\r\n        nextInfo.url.searchParams.set(key, value as any);\r\n      }\r\n      nextOptions.query = undefined;\r\n      nextOptions.path = nextInfo.url.toString();\r\n    }\r\n    return await this.#client.requestAPIList(this.constructor as any, nextOptions);\r\n  }\r\n\r\n  async *iterPages() {\r\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let page: AbstractPage<Item> = this;\r\n    yield page;\r\n    while (page.hasNextPage()) {\r\n      page = await page.getNextPage();\r\n      yield page;\r\n    }\r\n  }\r\n\r\n  async *[Symbol.asyncIterator]() {\r\n    for await (const page of this.iterPages()) {\r\n      for (const item of page.getPaginatedItems()) {\r\n        yield item;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\r\n *\r\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\r\n *\r\n *    for await (const item of client.items.list()) {\r\n *      console.log(item)\r\n *    }\r\n */\r\nexport class PagePromise<\r\n    PageClass extends AbstractPage<Item>,\r\n    Item = ReturnType<PageClass['getPaginatedItems']>[number],\r\n  >\r\n  extends APIPromise<PageClass>\r\n  implements AsyncIterable<Item>\r\n{\r\n  constructor(\r\n    client: APIClient,\r\n    request: Promise<APIResponseProps>,\r\n    Page: new (...args: ConstructorParameters<typeof AbstractPage>) => PageClass,\r\n  ) {\r\n    super(\r\n      request,\r\n      async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Allow auto-paginating iteration on an unawaited list call, eg:\r\n   *\r\n   *    for await (const item of client.items.list()) {\r\n   *      console.log(item)\r\n   *    }\r\n   */\r\n  async *[Symbol.asyncIterator]() {\r\n    const page = await this;\r\n    for await (const item of page) {\r\n      yield item;\r\n    }\r\n  }\r\n}\r\n\r\nexport const createResponseHeaders = (\r\n  headers: Awaited<ReturnType<Fetch>>['headers'],\r\n): Record<string, string> => {\r\n  return new Proxy(\r\n    Object.fromEntries(\r\n      // @ts-ignore\r\n      headers.entries(),\r\n    ),\r\n    {\r\n      get(target, name) {\r\n        const key = name.toString();\r\n        return target[key.toLowerCase()] || target[key];\r\n      },\r\n    },\r\n  );\r\n};\r\n\r\ntype HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'delete';\r\n\r\nexport type RequestClient = { fetch: Fetch };\r\nexport type Headers = Record<string, string | null | undefined>;\r\nexport type DefaultQuery = Record<string, string | undefined>;\r\nexport type KeysEnum<T> = { [P in keyof Required<T>]: true };\r\n\r\nexport type RequestOptions<\r\n  Req = unknown | Record<string, unknown> | Readable | BlobLike | ArrayBufferView | ArrayBuffer,\r\n> = {\r\n  method?: HTTPMethod;\r\n  path?: string;\r\n  query?: Req | undefined;\r\n  body?: Req | null | undefined;\r\n  headers?: Headers | undefined;\r\n\r\n  maxRetries?: number;\r\n  stream?: boolean | undefined;\r\n  timeout?: number;\r\n  httpAgent?: Agent;\r\n  signal?: AbortSignal | undefined | null;\r\n  idempotencyKey?: string;\r\n\r\n  __binaryRequest?: boolean | undefined;\r\n  __binaryResponse?: boolean | undefined;\r\n  __streamClass?: typeof Stream;\r\n};\r\n\r\n// This is required so that we can determine if a given object matches the RequestOptions\r\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\r\n// compiler such that any missing / extraneous keys will cause an error.\r\nconst requestOptionsKeys: KeysEnum<RequestOptions> = {\r\n  method: true,\r\n  path: true,\r\n  query: true,\r\n  body: true,\r\n  headers: true,\r\n\r\n  maxRetries: true,\r\n  stream: true,\r\n  timeout: true,\r\n  httpAgent: true,\r\n  signal: true,\r\n  idempotencyKey: true,\r\n\r\n  __binaryRequest: true,\r\n  __binaryResponse: true,\r\n  __streamClass: true,\r\n};\r\n\r\nexport const isRequestOptions = (obj: unknown): obj is RequestOptions => {\r\n  return (\r\n    typeof obj === 'object' &&\r\n    obj !== null &&\r\n    !isEmptyObj(obj) &&\r\n    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))\r\n  );\r\n};\r\n\r\nexport type FinalRequestOptions<Req = unknown | Record<string, unknown> | Readable | DataView> =\r\n  RequestOptions<Req> & {\r\n    method: HTTPMethod;\r\n    path: string;\r\n  };\r\n\r\ndeclare const Deno: any;\r\ndeclare const EdgeRuntime: any;\r\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\r\ntype PlatformName =\r\n  | 'MacOS'\r\n  | 'Linux'\r\n  | 'Windows'\r\n  | 'FreeBSD'\r\n  | 'OpenBSD'\r\n  | 'iOS'\r\n  | 'Android'\r\n  | `Other:${string}`\r\n  | 'Unknown';\r\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\r\ntype PlatformProperties = {\r\n  'X-Stainless-Lang': 'js';\r\n  'X-Stainless-Package-Version': string;\r\n  'X-Stainless-OS': PlatformName;\r\n  'X-Stainless-Arch': Arch;\r\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\r\n  'X-Stainless-Runtime-Version': string;\r\n};\r\nconst getPlatformProperties = (): PlatformProperties => {\r\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\r\n    return {\r\n      'X-Stainless-Lang': 'js',\r\n      'X-Stainless-Package-Version': VERSION,\r\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\r\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\r\n      'X-Stainless-Runtime': 'deno',\r\n      'X-Stainless-Runtime-Version':\r\n        typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\r\n    };\r\n  }\r\n  if (typeof EdgeRuntime !== 'undefined') {\r\n    return {\r\n      'X-Stainless-Lang': 'js',\r\n      'X-Stainless-Package-Version': VERSION,\r\n      'X-Stainless-OS': 'Unknown',\r\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\r\n      'X-Stainless-Runtime': 'edge',\r\n      'X-Stainless-Runtime-Version': process.version,\r\n    };\r\n  }\r\n  // Check if Node.js\r\n  if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\r\n    return {\r\n      'X-Stainless-Lang': 'js',\r\n      'X-Stainless-Package-Version': VERSION,\r\n      'X-Stainless-OS': normalizePlatform(process.platform),\r\n      'X-Stainless-Arch': normalizeArch(process.arch),\r\n      'X-Stainless-Runtime': 'node',\r\n      'X-Stainless-Runtime-Version': process.version,\r\n    };\r\n  }\r\n\r\n  const browserInfo = getBrowserInfo();\r\n  if (browserInfo) {\r\n    return {\r\n      'X-Stainless-Lang': 'js',\r\n      'X-Stainless-Package-Version': VERSION,\r\n      'X-Stainless-OS': 'Unknown',\r\n      'X-Stainless-Arch': 'unknown',\r\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\r\n      'X-Stainless-Runtime-Version': browserInfo.version,\r\n    };\r\n  }\r\n\r\n  // TODO add support for Cloudflare workers, etc.\r\n  return {\r\n    'X-Stainless-Lang': 'js',\r\n    'X-Stainless-Package-Version': VERSION,\r\n    'X-Stainless-OS': 'Unknown',\r\n    'X-Stainless-Arch': 'unknown',\r\n    'X-Stainless-Runtime': 'unknown',\r\n    'X-Stainless-Runtime-Version': 'unknown',\r\n  };\r\n};\r\n\r\ntype BrowserInfo = {\r\n  browser: Browser;\r\n  version: string;\r\n};\r\n\r\ndeclare const navigator: { userAgent: string } | undefined;\r\n\r\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\r\nfunction getBrowserInfo(): BrowserInfo | null {\r\n  if (typeof navigator === 'undefined' || !navigator) {\r\n    return null;\r\n  }\r\n\r\n  // NOTE: The order matters here!\r\n  const browserPatterns = [\r\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\r\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\r\n  ];\r\n\r\n  // Find the FIRST matching browser\r\n  for (const { key, pattern } of browserPatterns) {\r\n    const match = pattern.exec(navigator.userAgent);\r\n    if (match) {\r\n      const major = match[1] || 0;\r\n      const minor = match[2] || 0;\r\n      const patch = match[3] || 0;\r\n\r\n      return { browser: key, version: `${major}.${minor}.${patch}` };\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nconst normalizeArch = (arch: string): Arch => {\r\n  // Node docs:\r\n  // - https://nodejs.org/api/process.html#processarch\r\n  // Deno docs:\r\n  // - https://doc.deno.land/deno/stable/~/Deno.build\r\n  if (arch === 'x32') return 'x32';\r\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\r\n  if (arch === 'arm') return 'arm';\r\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\r\n  if (arch) return `other:${arch}`;\r\n  return 'unknown';\r\n};\r\n\r\nconst normalizePlatform = (platform: string): PlatformName => {\r\n  // Node platforms:\r\n  // - https://nodejs.org/api/process.html#processplatform\r\n  // Deno platforms:\r\n  // - https://doc.deno.land/deno/stable/~/Deno.build\r\n  // - https://github.com/denoland/deno/issues/14799\r\n\r\n  platform = platform.toLowerCase();\r\n\r\n  // NOTE: this iOS check is untested and may not work\r\n  // Node does not work natively on IOS, there is a fork at\r\n  // https://github.com/nodejs-mobile/nodejs-mobile\r\n  // however it is unknown at the time of writing how to detect if it is running\r\n  if (platform.includes('ios')) return 'iOS';\r\n  if (platform === 'android') return 'Android';\r\n  if (platform === 'darwin') return 'MacOS';\r\n  if (platform === 'win32') return 'Windows';\r\n  if (platform === 'freebsd') return 'FreeBSD';\r\n  if (platform === 'openbsd') return 'OpenBSD';\r\n  if (platform === 'linux') return 'Linux';\r\n  if (platform) return `Other:${platform}`;\r\n  return 'Unknown';\r\n};\r\n\r\nlet _platformHeaders: PlatformProperties;\r\nconst getPlatformHeaders = () => {\r\n  return (_platformHeaders ??= getPlatformProperties());\r\n};\r\n\r\nexport const safeJSON = (text: string) => {\r\n  try {\r\n    return JSON.parse(text);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n// https://stackoverflow.com/a/19709846\r\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\r\nconst isAbsoluteURL = (url: string): boolean => {\r\n  return startsWithSchemeRegexp.test(url);\r\n};\r\n\r\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\nconst validatePositiveInteger = (name: string, n: unknown): number => {\r\n  if (typeof n !== 'number' || !Number.isInteger(n)) {\r\n    throw new GroqError(`${name} must be an integer`);\r\n  }\r\n  if (n < 0) {\r\n    throw new GroqError(`${name} must be a positive integer`);\r\n  }\r\n  return n;\r\n};\r\n\r\nexport const castToError = (err: any): Error => {\r\n  if (err instanceof Error) return err;\r\n  return new Error(err);\r\n};\r\n\r\nexport const ensurePresent = <T>(value: T | null | undefined): T => {\r\n  if (value == null) throw new GroqError(`Expected a value to be given but received ${value} instead.`);\r\n  return value;\r\n};\r\n\r\n/**\r\n * Read an environment variable.\r\n *\r\n * Trims beginning and trailing whitespace.\r\n *\r\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\r\n */\r\nexport const readEnv = (env: string): string | undefined => {\r\n  if (typeof process !== 'undefined') {\r\n    return process.env?.[env]?.trim() ?? undefined;\r\n  }\r\n  if (typeof Deno !== 'undefined') {\r\n    return Deno.env?.get?.(env)?.trim();\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const coerceInteger = (value: unknown): number => {\r\n  if (typeof value === 'number') return Math.round(value);\r\n  if (typeof value === 'string') return parseInt(value, 10);\r\n\r\n  throw new GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\r\n};\r\n\r\nexport const coerceFloat = (value: unknown): number => {\r\n  if (typeof value === 'number') return value;\r\n  if (typeof value === 'string') return parseFloat(value);\r\n\r\n  throw new GroqError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\r\n};\r\n\r\nexport const coerceBoolean = (value: unknown): boolean => {\r\n  if (typeof value === 'boolean') return value;\r\n  if (typeof value === 'string') return value === 'true';\r\n  return Boolean(value);\r\n};\r\n\r\nexport const maybeCoerceInteger = (value: unknown): number | undefined => {\r\n  if (value === undefined) {\r\n    return undefined;\r\n  }\r\n  return coerceInteger(value);\r\n};\r\n\r\nexport const maybeCoerceFloat = (value: unknown): number | undefined => {\r\n  if (value === undefined) {\r\n    return undefined;\r\n  }\r\n  return coerceFloat(value);\r\n};\r\n\r\nexport const maybeCoerceBoolean = (value: unknown): boolean | undefined => {\r\n  if (value === undefined) {\r\n    return undefined;\r\n  }\r\n  return coerceBoolean(value);\r\n};\r\n\r\n// https://stackoverflow.com/a/34491287\r\nexport function isEmptyObj(obj: Object | null | undefined): boolean {\r\n  if (!obj) return true;\r\n  for (const _k in obj) return false;\r\n  return true;\r\n}\r\n\r\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\r\nexport function hasOwn(obj: Object, key: string): boolean {\r\n  return Object.prototype.hasOwnProperty.call(obj, key);\r\n}\r\n\r\n/**\r\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\r\n * using lower-case for all properties,\r\n * ignoring any keys with undefined values,\r\n * and deleting any keys with null values.\r\n */\r\nfunction applyHeadersMut(targetHeaders: Headers, newHeaders: Headers): void {\r\n  for (const k in newHeaders) {\r\n    if (!hasOwn(newHeaders, k)) continue;\r\n    const lowerKey = k.toLowerCase();\r\n    if (!lowerKey) continue;\r\n\r\n    const val = newHeaders[k];\r\n\r\n    if (val === null) {\r\n      delete targetHeaders[lowerKey];\r\n    } else if (val !== undefined) {\r\n      targetHeaders[lowerKey] = val;\r\n    }\r\n  }\r\n}\r\n\r\nexport function debug(action: string, ...args: any[]) {\r\n  if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\r\n    console.log(`Groq:DEBUG:${action}`, ...args);\r\n  }\r\n}\r\n\r\n/**\r\n * https://stackoverflow.com/a/2117523\r\n */\r\nconst uuid4 = () => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n    const r = (Math.random() * 16) | 0;\r\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n};\r\n\r\nexport const isRunningInBrowser = () => {\r\n  return (\r\n    // @ts-ignore\r\n    typeof window !== 'undefined' &&\r\n    // @ts-ignore\r\n    typeof window.document !== 'undefined' &&\r\n    // @ts-ignore\r\n    typeof navigator !== 'undefined'\r\n  );\r\n};\r\n\r\nexport interface HeadersProtocol {\r\n  get: (header: string) => string | null | undefined;\r\n}\r\nexport type HeadersLike = Record<string, string | string[] | undefined> | HeadersProtocol;\r\n\r\nexport const isHeadersProtocol = (headers: any): headers is HeadersProtocol => {\r\n  return typeof headers?.get === 'function';\r\n};\r\n\r\nexport const getRequiredHeader = (headers: HeadersLike, header: string): string => {\r\n  const lowerCasedHeader = header.toLowerCase();\r\n  if (isHeadersProtocol(headers)) {\r\n    // to deal with the case where the header looks like Stainless-Event-Id\r\n    const intercapsHeader =\r\n      header[0]?.toUpperCase() +\r\n      header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\r\n    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\r\n      const value = headers.get(key);\r\n      if (value) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (const [key, value] of Object.entries(headers)) {\r\n    if (key.toLowerCase() === lowerCasedHeader) {\r\n      if (Array.isArray(value)) {\r\n        if (value.length <= 1) return value[0];\r\n        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\r\n        return value[0];\r\n      }\r\n      return value;\r\n    }\r\n  }\r\n\r\n  throw new Error(`Could not find ${header} header`);\r\n};\r\n\r\n/**\r\n * Encodes a string to Base64 format.\r\n */\r\nexport const toBase64 = (str: string | null | undefined): string => {\r\n  if (!str) return '';\r\n  if (typeof Buffer !== 'undefined') {\r\n    return Buffer.from(str).toString('base64');\r\n  }\r\n\r\n  if (typeof btoa !== 'undefined') {\r\n    return btoa(str);\r\n  }\r\n\r\n  throw new GroqError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\r\n};\r\n\r\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\r\n  return obj != null && typeof obj === 'object' && !Array.isArray(obj);\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport type { Groq } from './index';\r\n\r\nexport class APIResource {\r\n  protected _client: Groq;\r\n\r\n  constructor(client: Groq) {\r\n    this._client = client;\r\n  }\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from '../../core';\r\nimport { APIResource } from '../../resource';\r\nimport * as TranscriptionsAPI from './transcriptions';\r\nimport { type Uploadable, multipartFormRequestOptions } from '../../core';\r\n\r\nexport class Transcriptions extends APIResource {\r\n  /**\r\n   * Transcribes audio into the input language.\r\n   */\r\n  create(body: TranscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<Transcription> {\r\n    return this._client.post(\r\n      '/openai/v1/audio/transcriptions',\r\n      multipartFormRequestOptions({ body, ...options }),\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a transcription response returned by model, based on the provided\r\n * input.\r\n */\r\nexport interface Transcription {\r\n  /**\r\n   * The transcribed text.\r\n   */\r\n  text: string;\r\n}\r\n\r\nexport interface TranscriptionCreateParams {\r\n  /**\r\n   * The audio file object (not file name) to transcribe, in one of these formats:\r\n   * flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\r\n   */\r\n  file: Uploadable;\r\n\r\n  /**\r\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\r\n   */\r\n  model: (string & {}) | 'whisper-large-v3';\r\n\r\n  /**\r\n   * The language of the input audio. Supplying the input language in\r\n   * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will\r\n   * improve accuracy and latency.\r\n   */\r\n  language?: string;\r\n\r\n  /**\r\n   * An optional text to guide the model's style or continue a previous audio\r\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the\r\n   * audio language.\r\n   */\r\n  prompt?: string;\r\n\r\n  /**\r\n   * The format of the transcript output, in one of these options: `json`, `text`, or\r\n   * `verbose_json`.\r\n   */\r\n  response_format?: 'json' | 'text' | 'verbose_json';\r\n\r\n  /**\r\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\r\n   * output more random, while lower values like 0.2 will make it more focused and\r\n   * deterministic. If set to 0, the model will use\r\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\r\n   * automatically increase the temperature until certain thresholds are hit.\r\n   */\r\n  temperature?: number;\r\n\r\n  /**\r\n   * The timestamp granularities to populate for this transcription.\r\n   * `response_format` must be set `verbose_json` to use timestamp granularities.\r\n   * Either or both of these options are supported: `word`, or `segment`. Note: There\r\n   * is no additional latency for segment timestamps, but generating word timestamps\r\n   * incurs additional latency.\r\n   */\r\n  timestamp_granularities?: Array<'word' | 'segment'>;\r\n}\r\n\r\nexport namespace Transcriptions {\r\n  export import Transcription = TranscriptionsAPI.Transcription;\r\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from '../../core';\r\nimport { APIResource } from '../../resource';\r\nimport * as TranslationsAPI from './translations';\r\nimport { type Uploadable, multipartFormRequestOptions } from '../../core';\r\n\r\nexport class Translations extends APIResource {\r\n  /**\r\n   * Translates audio into English.\r\n   */\r\n  create(body: TranslationCreateParams, options?: Core.RequestOptions): Core.APIPromise<Translation> {\r\n    return this._client.post(\r\n      '/openai/v1/audio/translations',\r\n      multipartFormRequestOptions({ body, ...options }),\r\n    );\r\n  }\r\n}\r\n\r\nexport interface Translation {\r\n  text: string;\r\n}\r\n\r\nexport interface TranslationCreateParams {\r\n  /**\r\n   * The audio file object (not file name) translate, in one of these formats: flac,\r\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\r\n   */\r\n  file: Uploadable;\r\n\r\n  /**\r\n   * ID of the model to use. Only `whisper-large-v3` is currently available.\r\n   */\r\n  model: (string & {}) | 'whisper-large-v3';\r\n\r\n  /**\r\n   * An optional text to guide the model's style or continue a previous audio\r\n   * segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in\r\n   * English.\r\n   */\r\n  prompt?: string;\r\n\r\n  /**\r\n   * The format of the transcript output, in one of these options: `json`, `text`, or\r\n   * `verbose_json`.\r\n   */\r\n  response_format?: 'json' | 'text' | 'verbose_json';\r\n\r\n  /**\r\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\r\n   * output more random, while lower values like 0.2 will make it more focused and\r\n   * deterministic. If set to 0, the model will use\r\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\r\n   * automatically increase the temperature until certain thresholds are hit.\r\n   */\r\n  temperature?: number;\r\n}\r\n\r\nexport namespace Translations {\r\n  export import Translation = TranslationsAPI.Translation;\r\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../resource';\r\nimport * as TranscriptionsAPI from './transcriptions';\r\nimport * as TranslationsAPI from './translations';\r\n\r\nexport class Audio extends APIResource {\r\n  transcriptions: TranscriptionsAPI.Transcriptions = new TranscriptionsAPI.Transcriptions(this._client);\r\n  translations: TranslationsAPI.Translations = new TranslationsAPI.Translations(this._client);\r\n}\r\n\r\nexport namespace Audio {\r\n  export import Transcriptions = TranscriptionsAPI.Transcriptions;\r\n  export import Transcription = TranscriptionsAPI.Transcription;\r\n  export import TranscriptionCreateParams = TranscriptionsAPI.TranscriptionCreateParams;\r\n  export import Translations = TranslationsAPI.Translations;\r\n  export import Translation = TranslationsAPI.Translation;\r\n  export import TranslationCreateParams = TranslationsAPI.TranslationCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from '../../core';\r\nimport { APIResource } from '../../resource';\r\nimport * as ChatCompletionsAPI from './completions';\r\nimport * as CompletionsAPI from '../completions';\r\nimport * as Shared from '../shared';\r\nimport { Stream } from '../../lib/streaming';\r\n\r\nexport class Completions extends APIResource {\r\n  /**\r\n   * Creates a model response for the given chat conversation.\r\n   */\r\n  create(\r\n    body: ChatCompletionCreateParamsNonStreaming,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<ChatCompletion>;\r\n  create(\r\n    body: ChatCompletionCreateParamsStreaming,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<Stream<ChatCompletionChunk>>;\r\n  create(\r\n    body: ChatCompletionCreateParamsBase,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<Stream<ChatCompletionChunk> | ChatCompletion>;\r\n  create(\r\n    body: ChatCompletionCreateParams,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>> {\r\n    return this._client.post('/openai/v1/chat/completions', {\r\n      body,\r\n      ...options,\r\n      stream: body.stream ?? false,\r\n    }) as Core.APIPromise<ChatCompletion> | Core.APIPromise<Stream<ChatCompletionChunk>>;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a chat completion response returned by model, based on the provided\r\n * input.\r\n */\r\nexport interface ChatCompletion {\r\n  /**\r\n   * A unique identifier for the chat completion.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * A list of chat completion choices. Can be more than one if `n` is greater\r\n   * than 1.\r\n   */\r\n  choices: Array<ChatCompletion.Choice>;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) of when the chat completion was created.\r\n   */\r\n  created: number;\r\n\r\n  /**\r\n   * The model used for the chat completion.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always `chat.completion`.\r\n   */\r\n  object: 'chat.completion';\r\n\r\n  /**\r\n   * This fingerprint represents the backend configuration that the model runs with.\r\n   *\r\n   * Can be used in conjunction with the `seed` request parameter to understand when\r\n   * backend changes have been made that might impact determinism.\r\n   */\r\n  system_fingerprint?: string;\r\n\r\n  /**\r\n   * Usage statistics for the completion request.\r\n   */\r\n  usage?: CompletionsAPI.CompletionUsage;\r\n}\r\n\r\nexport namespace ChatCompletion {\r\n  export interface Choice {\r\n    /**\r\n     * The reason the model stopped generating tokens. This will be `stop` if the model\r\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\r\n     * number of tokens specified in the request was reached, `tool_calls` if the model\r\n     * called a tool, or `function_call` (deprecated) if the model called a function.\r\n     */\r\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'function_call';\r\n\r\n    /**\r\n     * The index of the choice in the list of choices.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    logprobs: Choice.Logprobs | null;\r\n\r\n    /**\r\n     * A chat completion message generated by the model.\r\n     */\r\n    message: ChatCompletionsAPI.ChatCompletionMessage;\r\n  }\r\n\r\n  export namespace Choice {\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    export interface Logprobs {\r\n      /**\r\n       * A list of message content tokens with log probability information.\r\n       */\r\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionAssistantMessageParam {\r\n  /**\r\n   * The role of the messages author, in this case `assistant`.\r\n   */\r\n  role: 'assistant';\r\n\r\n  /**\r\n   * The contents of the assistant message. Required unless `tool_calls` or\r\n   * `function_call` is specified.\r\n   */\r\n  content?: string | null;\r\n\r\n  /**\r\n   * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n   * a function that should be called, as generated by the model.\r\n   */\r\n  function_call?: ChatCompletionAssistantMessageParam.FunctionCall;\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * The tool calls generated by the model, such as function calls.\r\n   */\r\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\r\n}\r\n\r\nexport namespace ChatCompletionAssistantMessageParam {\r\n  /**\r\n   * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n   * a function that should be called, as generated by the model.\r\n   */\r\n  export interface FunctionCall {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a streamed chunk of a chat completion response returned by model,\r\n * based on the provided input.\r\n */\r\nexport interface ChatCompletionChunk {\r\n  /**\r\n   * A unique identifier for the chat completion. Each chunk has the same ID.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * A list of chat completion choices. Can contain more than one elements if `n` is\r\n   * greater than 1.\r\n   */\r\n  choices: Array<ChatCompletionChunk.Choice>;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) of when the chat completion was created. Each\r\n   * chunk has the same timestamp.\r\n   */\r\n  created: number;\r\n\r\n  /**\r\n   * The model to generate the completion.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always `chat.completion.chunk`.\r\n   */\r\n  object: 'chat.completion.chunk';\r\n\r\n  /**\r\n   * This fingerprint represents the backend configuration that the model runs with.\r\n   * Can be used in conjunction with the `seed` request parameter to understand when\r\n   * backend changes have been made that might impact determinism.\r\n   */\r\n  system_fingerprint?: string;\r\n\r\n  x_groq?: ChatCompletionChunk.XGroq;\r\n}\r\n\r\nexport namespace ChatCompletionChunk {\r\n  export interface Choice {\r\n    /**\r\n     * A chat completion delta generated by streamed model responses.\r\n     */\r\n    delta: Choice.Delta;\r\n\r\n    /**\r\n     * The reason the model stopped generating tokens. This will be `stop` if the model\r\n     * hit a natural stop point or a provided stop sequence, `length` if the maximum\r\n     * number of tokens specified in the request was reached, `tool_calls` if the model\r\n     * called a tool, or `function_call` (deprecated) if the model called a function.\r\n     */\r\n    finish_reason: 'stop' | 'length' | 'tool_calls' | 'function_call' | null;\r\n\r\n    /**\r\n     * The index of the choice in the list of choices.\r\n     */\r\n    index: number;\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    logprobs?: Choice.Logprobs | null;\r\n  }\r\n\r\n  export namespace Choice {\r\n    /**\r\n     * A chat completion delta generated by streamed model responses.\r\n     */\r\n    export interface Delta {\r\n      /**\r\n       * The contents of the chunk message.\r\n       */\r\n      content?: string | null;\r\n\r\n      /**\r\n       * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n       * a function that should be called, as generated by the model.\r\n       */\r\n      function_call?: Delta.FunctionCall;\r\n\r\n      /**\r\n       * The role of the author of this message.\r\n       */\r\n      role?: 'system' | 'user' | 'assistant' | 'tool';\r\n\r\n      tool_calls?: Array<Delta.ToolCall>;\r\n    }\r\n\r\n    export namespace Delta {\r\n      /**\r\n       * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n       * a function that should be called, as generated by the model.\r\n       */\r\n      export interface FunctionCall {\r\n        /**\r\n         * The arguments to call the function with, as generated by the model in JSON\r\n         * format. Note that the model does not always generate valid JSON, and may\r\n         * hallucinate parameters not defined by your function schema. Validate the\r\n         * arguments in your code before calling your function.\r\n         */\r\n        arguments?: string;\r\n\r\n        /**\r\n         * The name of the function to call.\r\n         */\r\n        name?: string;\r\n      }\r\n\r\n      export interface ToolCall {\r\n        index: number;\r\n\r\n        /**\r\n         * The ID of the tool call.\r\n         */\r\n        id?: string;\r\n\r\n        function?: ToolCall.Function;\r\n\r\n        /**\r\n         * The type of the tool. Currently, only `function` is supported.\r\n         */\r\n        type?: 'function';\r\n      }\r\n\r\n      export namespace ToolCall {\r\n        export interface Function {\r\n          /**\r\n           * The arguments to call the function with, as generated by the model in JSON\r\n           * format. Note that the model does not always generate valid JSON, and may\r\n           * hallucinate parameters not defined by your function schema. Validate the\r\n           * arguments in your code before calling your function.\r\n           */\r\n          arguments?: string;\r\n\r\n          /**\r\n           * The name of the function to call.\r\n           */\r\n          name?: string;\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Log probability information for the choice.\r\n     */\r\n    export interface Logprobs {\r\n      /**\r\n       * A list of message content tokens with log probability information.\r\n       */\r\n      content: Array<ChatCompletionsAPI.ChatCompletionTokenLogprob> | null;\r\n    }\r\n  }\r\n\r\n  export interface XGroq {\r\n    /**\r\n     * A groq request ID which can be used by to refer to a specific request to groq\r\n     * support Only sent with the first chunk\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * An error string indicating why a stream was stopped early\r\n     */\r\n    error?: string;\r\n\r\n    /**\r\n     * Usage information for the stream. Only sent in the final chunk\r\n     */\r\n    usage?: CompletionsAPI.CompletionUsage;\r\n  }\r\n}\r\n\r\nexport type ChatCompletionContentPart = ChatCompletionContentPartText | ChatCompletionContentPartImage;\r\n\r\nexport interface ChatCompletionContentPartImage {\r\n  image_url: ChatCompletionContentPartImage.ImageURL;\r\n\r\n  /**\r\n   * The type of the content part.\r\n   */\r\n  type: 'image_url';\r\n}\r\n\r\nexport namespace ChatCompletionContentPartImage {\r\n  export interface ImageURL {\r\n    /**\r\n     * Either a URL of the image or the base64 encoded image data.\r\n     */\r\n    url: string;\r\n\r\n    /**\r\n     * Specifies the detail level of the image.\r\n     */\r\n    detail?: 'auto' | 'low' | 'high';\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionContentPartText {\r\n  /**\r\n   * The text content.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * The type of the content part.\r\n   */\r\n  type: 'text';\r\n}\r\n\r\n/**\r\n * Specifying a particular function via `{\"name\": \"my_function\"}` forces the model\r\n * to call that function.\r\n */\r\nexport interface ChatCompletionFunctionCallOption {\r\n  /**\r\n   * The name of the function to call.\r\n   */\r\n  name: string;\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface ChatCompletionFunctionMessageParam {\r\n  /**\r\n   * The contents of the function message.\r\n   */\r\n  content: string | null;\r\n\r\n  /**\r\n   * The name of the function to call.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `function`.\r\n   */\r\n  role: 'function';\r\n}\r\n\r\n/**\r\n * A chat completion message generated by the model.\r\n */\r\nexport interface ChatCompletionMessage {\r\n  /**\r\n   * The contents of the message.\r\n   */\r\n  content: string | null;\r\n\r\n  /**\r\n   * The role of the author of this message.\r\n   */\r\n  role: 'assistant';\r\n\r\n  /**\r\n   * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n   * a function that should be called, as generated by the model.\r\n   */\r\n  function_call?: ChatCompletionMessage.FunctionCall;\r\n\r\n  /**\r\n   * The tool calls generated by the model, such as function calls.\r\n   */\r\n  tool_calls?: Array<ChatCompletionMessageToolCall>;\r\n}\r\n\r\nexport namespace ChatCompletionMessage {\r\n  /**\r\n   * @deprecated: Deprecated and replaced by `tool_calls`. The name and arguments of\r\n   * a function that should be called, as generated by the model.\r\n   */\r\n  export interface FunctionCall {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\nexport type ChatCompletionMessageParam =\r\n  | ChatCompletionSystemMessageParam\r\n  | ChatCompletionUserMessageParam\r\n  | ChatCompletionAssistantMessageParam\r\n  | ChatCompletionToolMessageParam\r\n  | ChatCompletionFunctionMessageParam;\r\n\r\nexport interface ChatCompletionMessageToolCall {\r\n  /**\r\n   * The ID of the tool call.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The function that the model called.\r\n   */\r\n  function: ChatCompletionMessageToolCall.Function;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\nexport namespace ChatCompletionMessageToolCall {\r\n  /**\r\n   * The function that the model called.\r\n   */\r\n  export interface Function {\r\n    /**\r\n     * The arguments to call the function with, as generated by the model in JSON\r\n     * format. Note that the model does not always generate valid JSON, and may\r\n     * hallucinate parameters not defined by your function schema. Validate the\r\n     * arguments in your code before calling your function.\r\n     */\r\n    arguments: string;\r\n\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Specifies a tool the model should use. Use to force the model to call a specific\r\n * function.\r\n */\r\nexport interface ChatCompletionNamedToolChoice {\r\n  function: ChatCompletionNamedToolChoice.Function;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\nexport namespace ChatCompletionNamedToolChoice {\r\n  export interface Function {\r\n    /**\r\n     * The name of the function to call.\r\n     */\r\n    name: string;\r\n  }\r\n}\r\n\r\n/**\r\n * The role of the author of a message\r\n */\r\nexport type ChatCompletionRole = 'system' | 'user' | 'assistant' | 'tool' | 'function';\r\n\r\nexport interface ChatCompletionSystemMessageParam {\r\n  /**\r\n   * The contents of the system message.\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `system`.\r\n   */\r\n  role: 'system';\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport interface ChatCompletionTokenLogprob {\r\n  /**\r\n   * The token.\r\n   */\r\n  token: string;\r\n\r\n  /**\r\n   * A list of integers representing the UTF-8 bytes representation of the token.\r\n   * Useful in instances where characters are represented by multiple tokens and\r\n   * their byte representations must be combined to generate the correct text\r\n   * representation. Can be `null` if there is no bytes representation for the token.\r\n   */\r\n  bytes: Array<number> | null;\r\n\r\n  /**\r\n   * The log probability of this token, if it is within the top 20 most likely\r\n   * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\r\n   * unlikely.\r\n   */\r\n  logprob: number;\r\n\r\n  /**\r\n   * List of the most likely tokens and their log probability, at this token\r\n   * position. In rare cases, there may be fewer than the number of requested\r\n   * `top_logprobs` returned.\r\n   */\r\n  top_logprobs: Array<ChatCompletionTokenLogprob.TopLogprob>;\r\n}\r\n\r\nexport namespace ChatCompletionTokenLogprob {\r\n  export interface TopLogprob {\r\n    /**\r\n     * The token.\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * A list of integers representing the UTF-8 bytes representation of the token.\r\n     * Useful in instances where characters are represented by multiple tokens and\r\n     * their byte representations must be combined to generate the correct text\r\n     * representation. Can be `null` if there is no bytes representation for the token.\r\n     */\r\n    bytes: Array<number> | null;\r\n\r\n    /**\r\n     * The log probability of this token, if it is within the top 20 most likely\r\n     * tokens. Otherwise, the value `-9999.0` is used to signify that the token is very\r\n     * unlikely.\r\n     */\r\n    logprob: number;\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionTool {\r\n  function: Shared.FunctionDefinition;\r\n\r\n  /**\r\n   * The type of the tool. Currently, only `function` is supported.\r\n   */\r\n  type: 'function';\r\n}\r\n\r\n/**\r\n * Controls which (if any) tool is called by the model. `none` means the model will\r\n * not call any tool and instead generates a message. `auto` means the model can\r\n * pick between generating a message or calling one or more tools. `required` means\r\n * the model must call one or more tools. Specifying a particular tool via\r\n * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\r\n * call that tool.\r\n *\r\n * `none` is the default when no tools are present. `auto` is the default if tools\r\n * are present.\r\n */\r\nexport type ChatCompletionToolChoiceOption = 'none' | 'auto' | 'required' | ChatCompletionNamedToolChoice;\r\n\r\nexport interface ChatCompletionToolMessageParam {\r\n  /**\r\n   * The contents of the tool message.\r\n   */\r\n  content: string;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `tool`.\r\n   */\r\n  role: 'tool';\r\n\r\n  /**\r\n   * Tool call that this message is responding to.\r\n   */\r\n  tool_call_id: string;\r\n}\r\n\r\nexport interface ChatCompletionUserMessageParam {\r\n  /**\r\n   * The contents of the user message.\r\n   */\r\n  content: string | Array<ChatCompletionContentPart>;\r\n\r\n  /**\r\n   * The role of the messages author, in this case `user`.\r\n   */\r\n  role: 'user';\r\n\r\n  /**\r\n   * An optional name for the participant. Provides the model information to\r\n   * differentiate between participants of the same role.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport type ChatCompletionCreateParams =\r\n  | ChatCompletionCreateParamsNonStreaming\r\n  | ChatCompletionCreateParamsStreaming;\r\n\r\nexport interface ChatCompletionCreateParamsBase {\r\n  /**\r\n   * A list of messages comprising the conversation so far.\r\n   */\r\n  messages: Array<ChatCompletionMessageParam>;\r\n\r\n  /**\r\n   * ID of the model to use. For details on which models are compatible with the Chat\r\n   * API, see available [models](/docs/models)\r\n   */\r\n  model: (string & {}) | 'gemma-7b-it' | 'llama3-70b-8192' | 'llama3-8b-8192' | 'mixtral-8x7b-32768';\r\n\r\n  /**\r\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their\r\n   * existing frequency in the text so far, decreasing the model's likelihood to\r\n   * repeat the same line verbatim.\r\n   */\r\n  frequency_penalty?: number | null;\r\n\r\n  /**\r\n   * Deprecated in favor of `tool_choice`.\r\n   *\r\n   * Controls which (if any) function is called by the model. `none` means the model\r\n   * will not call a function and instead generates a message. `auto` means the model\r\n   * can pick between generating a message or calling a function. Specifying a\r\n   * particular function via `{\"name\": \"my_function\"}` forces the model to call that\r\n   * function.\r\n   *\r\n   * `none` is the default when no functions are present. `auto` is the default if\r\n   * functions are present.\r\n   */\r\n  function_call?: 'none' | 'auto' | 'required' | ChatCompletionFunctionCallOption | null;\r\n\r\n  /**\r\n   * Deprecated in favor of `tools`.\r\n   *\r\n   * A list of functions the model may generate JSON inputs for.\r\n   */\r\n  functions?: Array<CompletionCreateParams.Function> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. Modify the likelihood of\r\n   * specified tokens appearing in the completion.\r\n   */\r\n  logit_bias?: Record<string, number> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. Whether to return log\r\n   * probabilities of the output tokens or not. If true, returns the log\r\n   * probabilities of each output token returned in the `content` of `message`.\r\n   */\r\n  logprobs?: boolean | null;\r\n\r\n  /**\r\n   * The maximum number of tokens that can be generated in the chat completion. The\r\n   * total length of input tokens and generated tokens is limited by the model's\r\n   * context length.\r\n   */\r\n  max_tokens?: number | null;\r\n\r\n  /**\r\n   * How many chat completion choices to generate for each input message. Note that\r\n   * the current moment, only n=1 is supported. Other values will result in a 400\r\n   * response.\r\n   */\r\n  n?: number | null;\r\n\r\n  /**\r\n   * Whether to enable parallel function calling during tool use.\r\n   */\r\n  parallel_tool_calls?: boolean | null;\r\n\r\n  /**\r\n   * Number between -2.0 and 2.0. Positive values penalize new tokens based on\r\n   * whether they appear in the text so far, increasing the model's likelihood to\r\n   * talk about new topics.\r\n   */\r\n  presence_penalty?: number | null;\r\n\r\n  /**\r\n   * An object specifying the format that the model must output.\r\n   *\r\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\r\n   * message the model generates is valid JSON.\r\n   *\r\n   * **Important:** when using JSON mode, you **must** also instruct the model to\r\n   * produce JSON yourself via a system or user message.\r\n   */\r\n  response_format?: CompletionCreateParams.ResponseFormat | null;\r\n\r\n  /**\r\n   * If specified, our system will make a best effort to sample deterministically,\r\n   * such that repeated requests with the same `seed` and parameters should return\r\n   * the same result. Determinism is not guaranteed, and you should refer to the\r\n   * `system_fingerprint` response parameter to monitor changes in the backend.\r\n   */\r\n  seed?: number | null;\r\n\r\n  /**\r\n   * Up to 4 sequences where the API will stop generating further tokens. The\r\n   * returned text will not contain the stop sequence.\r\n   */\r\n  stop?: string | null | Array<string>;\r\n\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream?: boolean | null;\r\n\r\n  /**\r\n   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will\r\n   * make the output more random, while lower values like 0.2 will make it more\r\n   * focused and deterministic. We generally recommend altering this or top_p but not\r\n   * both\r\n   */\r\n  temperature?: number | null;\r\n\r\n  /**\r\n   * Controls which (if any) tool is called by the model. `none` means the model will\r\n   * not call any tool and instead generates a message. `auto` means the model can\r\n   * pick between generating a message or calling one or more tools. `required` means\r\n   * the model must call one or more tools. Specifying a particular tool via\r\n   * `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\r\n   * call that tool.\r\n   *\r\n   * `none` is the default when no tools are present. `auto` is the default if tools\r\n   * are present.\r\n   */\r\n  tool_choice?: ChatCompletionToolChoiceOption | null;\r\n\r\n  /**\r\n   * A list of tools the model may call. Currently, only functions are supported as a\r\n   * tool. Use this to provide a list of functions the model may generate JSON inputs\r\n   * for. A max of 128 functions are supported.\r\n   */\r\n  tools?: Array<ChatCompletionTool> | null;\r\n\r\n  /**\r\n   * This is not yet supported by any of our models. An integer between 0 and 20\r\n   * specifying the number of most likely tokens to return at each token position,\r\n   * each with an associated log probability. `logprobs` must be set to `true` if\r\n   * this parameter is used.\r\n   */\r\n  top_logprobs?: number | null;\r\n\r\n  /**\r\n   * An alternative to sampling with temperature, called nucleus sampling, where the\r\n   * model considers the results of the tokens with top_p probability mass. So 0.1\r\n   * means only the tokens comprising the top 10% probability mass are considered. We\r\n   * generally recommend altering this or temperature but not both.\r\n   */\r\n  top_p?: number | null;\r\n\r\n  /**\r\n   * A unique identifier representing your end-user, which can help us monitor and\r\n   * detect abuse.\r\n   */\r\n  user?: string | null;\r\n}\r\n\r\nexport namespace CompletionCreateParams {\r\n  /**\r\n   * @deprecated\r\n   */\r\n  export interface Function {\r\n    /**\r\n     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\r\n     * underscores and dashes, with a maximum length of 64.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * A description of what the function does, used by the model to choose when and\r\n     * how to call the function.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * The parameters the functions accepts, described as a JSON Schema object. See the\r\n     * docs on [tool use](/docs/tool-use) for examples, and the\r\n     * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\r\n     * documentation about the format.\r\n     *\r\n     * Omitting `parameters` defines a function with an empty parameter list.\r\n     */\r\n    parameters?: Shared.FunctionParameters;\r\n  }\r\n\r\n  /**\r\n   * An object specifying the format that the model must output.\r\n   *\r\n   * Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the\r\n   * message the model generates is valid JSON.\r\n   *\r\n   * **Important:** when using JSON mode, you **must** also instruct the model to\r\n   * produce JSON yourself via a system or user message.\r\n   */\r\n  export interface ResponseFormat {\r\n    /**\r\n     * Must be one of `text` or `json_object`.\r\n     */\r\n    type?: 'text' | 'json_object';\r\n  }\r\n}\r\n\r\nexport interface ChatCompletionCreateParamsNonStreaming extends ChatCompletionCreateParamsBase {\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream?: false | null;\r\n}\r\n\r\nexport interface ChatCompletionCreateParamsStreaming extends ChatCompletionCreateParamsBase {\r\n  /**\r\n   * If set, partial message deltas will be sent. Tokens will be sent as data-only\r\n   * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\r\n   * as they become available, with the stream terminated by a `data: [DONE]`\r\n   * message. [Example code](/docs/text-chat#streaming-a-chat-completion).\r\n   */\r\n  stream: true;\r\n}\r\n\r\nexport namespace Completions {\r\n  export import ChatCompletion = ChatCompletionsAPI.ChatCompletion;\r\n  export import ChatCompletionAssistantMessageParam = ChatCompletionsAPI.ChatCompletionAssistantMessageParam;\r\n  export import ChatCompletionChunk = ChatCompletionsAPI.ChatCompletionChunk;\r\n  export import ChatCompletionContentPart = ChatCompletionsAPI.ChatCompletionContentPart;\r\n  export import ChatCompletionContentPartImage = ChatCompletionsAPI.ChatCompletionContentPartImage;\r\n  export import ChatCompletionContentPartText = ChatCompletionsAPI.ChatCompletionContentPartText;\r\n  export import ChatCompletionFunctionCallOption = ChatCompletionsAPI.ChatCompletionFunctionCallOption;\r\n  export import ChatCompletionFunctionMessageParam = ChatCompletionsAPI.ChatCompletionFunctionMessageParam;\r\n  export import ChatCompletionMessage = ChatCompletionsAPI.ChatCompletionMessage;\r\n  export import ChatCompletionMessageParam = ChatCompletionsAPI.ChatCompletionMessageParam;\r\n  export import ChatCompletionMessageToolCall = ChatCompletionsAPI.ChatCompletionMessageToolCall;\r\n  export import ChatCompletionNamedToolChoice = ChatCompletionsAPI.ChatCompletionNamedToolChoice;\r\n  export import ChatCompletionRole = ChatCompletionsAPI.ChatCompletionRole;\r\n  export import ChatCompletionSystemMessageParam = ChatCompletionsAPI.ChatCompletionSystemMessageParam;\r\n  export import ChatCompletionTokenLogprob = ChatCompletionsAPI.ChatCompletionTokenLogprob;\r\n  export import ChatCompletionTool = ChatCompletionsAPI.ChatCompletionTool;\r\n  export import ChatCompletionToolChoiceOption = ChatCompletionsAPI.ChatCompletionToolChoiceOption;\r\n  export import ChatCompletionToolMessageParam = ChatCompletionsAPI.ChatCompletionToolMessageParam;\r\n  export import ChatCompletionUserMessageParam = ChatCompletionsAPI.ChatCompletionUserMessageParam;\r\n  export import CompletionCreateParams = ChatCompletionsAPI.CompletionCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../resource';\r\nimport * as CompletionsAPI from './completions';\r\n\r\nexport class Chat extends APIResource {\r\n  completions: CompletionsAPI.Completions = new CompletionsAPI.Completions(this._client);\r\n}\r\n\r\nexport namespace Chat {\r\n  export import Completions = CompletionsAPI.Completions;\r\n  export import ChatCompletion = CompletionsAPI.ChatCompletion;\r\n  export import ChatCompletionAssistantMessageParam = CompletionsAPI.ChatCompletionAssistantMessageParam;\r\n  export import ChatCompletionChunk = CompletionsAPI.ChatCompletionChunk;\r\n  export import ChatCompletionContentPart = CompletionsAPI.ChatCompletionContentPart;\r\n  export import ChatCompletionContentPartImage = CompletionsAPI.ChatCompletionContentPartImage;\r\n  export import ChatCompletionContentPartText = CompletionsAPI.ChatCompletionContentPartText;\r\n  export import ChatCompletionFunctionCallOption = CompletionsAPI.ChatCompletionFunctionCallOption;\r\n  export import ChatCompletionFunctionMessageParam = CompletionsAPI.ChatCompletionFunctionMessageParam;\r\n  export import ChatCompletionMessage = CompletionsAPI.ChatCompletionMessage;\r\n  export import ChatCompletionMessageParam = CompletionsAPI.ChatCompletionMessageParam;\r\n  export import ChatCompletionMessageToolCall = CompletionsAPI.ChatCompletionMessageToolCall;\r\n  export import ChatCompletionNamedToolChoice = CompletionsAPI.ChatCompletionNamedToolChoice;\r\n  export import ChatCompletionRole = CompletionsAPI.ChatCompletionRole;\r\n  export import ChatCompletionSystemMessageParam = CompletionsAPI.ChatCompletionSystemMessageParam;\r\n  export import ChatCompletionTokenLogprob = CompletionsAPI.ChatCompletionTokenLogprob;\r\n  export import ChatCompletionTool = CompletionsAPI.ChatCompletionTool;\r\n  export import ChatCompletionToolChoiceOption = CompletionsAPI.ChatCompletionToolChoiceOption;\r\n  export import ChatCompletionToolMessageParam = CompletionsAPI.ChatCompletionToolMessageParam;\r\n  export import ChatCompletionUserMessageParam = CompletionsAPI.ChatCompletionUserMessageParam;\r\n  export import CompletionCreateParams = CompletionsAPI.CompletionCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../resource';\r\nimport * as CompletionsAPI from './completions';\r\n\r\nexport class Completions extends APIResource {}\r\n\r\n/**\r\n * Usage statistics for the completion request.\r\n */\r\nexport interface CompletionUsage {\r\n  /**\r\n   * Number of tokens in the generated completion.\r\n   */\r\n  completion_tokens: number;\r\n\r\n  /**\r\n   * Number of tokens in the prompt.\r\n   */\r\n  prompt_tokens: number;\r\n\r\n  /**\r\n   * Total number of tokens used in the request (prompt + completion).\r\n   */\r\n  total_tokens: number;\r\n\r\n  /**\r\n   * Time spent generating tokens\r\n   */\r\n  completion_time?: number;\r\n\r\n  /**\r\n   * Time spent processing input tokens\r\n   */\r\n  prompt_time?: number;\r\n\r\n  /**\r\n   * Time the requests was spent queued\r\n   */\r\n  queue_time?: number;\r\n\r\n  /**\r\n   * completion time and prompt time combined\r\n   */\r\n  total_time?: number;\r\n}\r\n\r\nexport namespace Completions {\r\n  export import CompletionUsage = CompletionsAPI.CompletionUsage;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from '../core';\r\nimport { APIResource } from '../resource';\r\nimport * as EmbeddingsAPI from './embeddings';\r\n\r\nexport class Embeddings extends APIResource {\r\n  /**\r\n   * Creates an embedding vector representing the input text.\r\n   */\r\n  create(\r\n    body: EmbeddingCreateParams,\r\n    options?: Core.RequestOptions,\r\n  ): Core.APIPromise<CreateEmbeddingResponse> {\r\n    return this._client.post('/openai/v1/embeddings', { body, ...options });\r\n  }\r\n}\r\n\r\nexport interface CreateEmbeddingResponse {\r\n  /**\r\n   * The list of embeddings generated by the model.\r\n   */\r\n  data: Array<Embedding>;\r\n\r\n  /**\r\n   * The name of the model used to generate the embedding.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * The object type, which is always \"list\".\r\n   */\r\n  object: 'list';\r\n\r\n  /**\r\n   * The usage information for the request.\r\n   */\r\n  usage: CreateEmbeddingResponse.Usage;\r\n}\r\n\r\nexport namespace CreateEmbeddingResponse {\r\n  /**\r\n   * The usage information for the request.\r\n   */\r\n  export interface Usage {\r\n    /**\r\n     * The number of tokens used by the prompt.\r\n     */\r\n    prompt_tokens: number;\r\n\r\n    /**\r\n     * The total number of tokens used by the request.\r\n     */\r\n    total_tokens: number;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an embedding vector returned by embedding endpoint.\r\n */\r\nexport interface Embedding {\r\n  /**\r\n   * The embedding vector, which is a list of floats. The length of vector depends on\r\n   * the model as listed in the [embedding guide](/docs/guides/embeddings).\r\n   */\r\n  embedding: Array<number> | string;\r\n\r\n  /**\r\n   * The index of the embedding in the list of embeddings.\r\n   */\r\n  index: number;\r\n\r\n  /**\r\n   * The object type, which is always \"embedding\".\r\n   */\r\n  object: 'embedding';\r\n}\r\n\r\nexport interface EmbeddingCreateParams {\r\n  /**\r\n   * Input text to embed, encoded as a string or array of tokens. To embed multiple\r\n   * inputs in a single request, pass an array of strings or array of token arrays.\r\n   * The input must not exceed the max input tokens for the model, cannot be an empty\r\n   * string, and any array must be 2048 dimensions or less.\r\n   */\r\n  input: string | Array<string>;\r\n\r\n  /**\r\n   * ID of the model to use.\r\n   */\r\n  model: (string & {}) | 'nomic-embed-text-v1_5';\r\n\r\n  /**\r\n   * The format to return the embeddings in. Can only be `float` or `base64`.\r\n   */\r\n  encoding_format?: 'float' | 'base64';\r\n\r\n  /**\r\n   * A unique identifier representing your end-user, which can help us monitor and\r\n   * detect abuse.\r\n   */\r\n  user?: string | null;\r\n}\r\n\r\nexport namespace Embeddings {\r\n  export import CreateEmbeddingResponse = EmbeddingsAPI.CreateEmbeddingResponse;\r\n  export import Embedding = EmbeddingsAPI.Embedding;\r\n  export import EmbeddingCreateParams = EmbeddingsAPI.EmbeddingCreateParams;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from '../core';\r\nimport { APIResource } from '../resource';\r\nimport * as ModelsAPI from './models';\r\n\r\nexport class Models extends APIResource {\r\n  /**\r\n   * Get a specific model\r\n   */\r\n  retrieve(model: string, options?: Core.RequestOptions): Core.APIPromise<Model> {\r\n    return this._client.get(`/openai/v1/models/${model}`, options);\r\n  }\r\n\r\n  /**\r\n   * get all available models\r\n   */\r\n  list(options?: Core.RequestOptions): Core.APIPromise<ModelListResponse> {\r\n    return this._client.get('/openai/v1/models', options);\r\n  }\r\n\r\n  /**\r\n   * Delete a model\r\n   */\r\n  delete(model: string, options?: Core.RequestOptions): Core.APIPromise<ModelDeleted> {\r\n    return this._client.delete(`/openai/v1/models/${model}`, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Describes an OpenAI model offering that can be used with the API.\r\n */\r\nexport interface Model {\r\n  /**\r\n   * The model identifier, which can be referenced in the API endpoints.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) when the model was created.\r\n   */\r\n  created: number;\r\n\r\n  /**\r\n   * The object type, which is always \"model\".\r\n   */\r\n  object: 'model';\r\n\r\n  /**\r\n   * The organization that owns the model.\r\n   */\r\n  owned_by: string;\r\n}\r\n\r\nexport interface ModelDeleted {\r\n  id: string;\r\n\r\n  deleted: boolean;\r\n\r\n  object: string;\r\n}\r\n\r\nexport interface ModelListResponse {\r\n  data: Array<Model>;\r\n\r\n  object: 'list';\r\n}\r\n\r\nexport namespace Models {\r\n  export import Model = ModelsAPI.Model;\r\n  export import ModelDeleted = ModelsAPI.ModelDeleted;\r\n  export import ModelListResponse = ModelsAPI.ModelListResponse;\r\n}\r\n", "// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport * as Core from './core';\r\nimport * as Errors from './error';\r\nimport { type Agent } from './_shims/index';\r\nimport * as Uploads from './uploads';\r\nimport * as API from './resources/index';\r\n\r\nexport interface ClientOptions {\r\n  /**\r\n   * Defaults to process.env['GROQ_API_KEY'].\r\n   */\r\n  apiKey?: string | undefined;\r\n\r\n  /**\r\n   * Override the default base URL for the API, e.g., \"https://api.example.com/v2/\"\r\n   *\r\n   * Defaults to process.env['GROQ_BASE_URL'].\r\n   */\r\n  baseURL?: string | null | undefined;\r\n\r\n  /**\r\n   * The maximum amount of time (in milliseconds) that the client should wait for a response\r\n   * from the server before timing out a single request.\r\n   *\r\n   * Note that request timeouts are retried by default, so in a worst-case scenario you may wait\r\n   * much longer than this timeout before the promise succeeds or fails.\r\n   */\r\n  timeout?: number;\r\n\r\n  /**\r\n   * An HTTP agent used to manage HTTP(S) connections.\r\n   *\r\n   * If not provided, an agent will be constructed by default in the Node.js environment,\r\n   * otherwise no agent is used.\r\n   */\r\n  httpAgent?: Agent;\r\n\r\n  /**\r\n   * Specify a custom `fetch` function implementation.\r\n   *\r\n   * If not provided, we use `node-fetch` on Node.js and otherwise expect that `fetch` is\r\n   * defined globally.\r\n   */\r\n  fetch?: Core.Fetch | undefined;\r\n\r\n  /**\r\n   * The maximum number of times that the client will retry a request in case of a\r\n   * temporary failure, like a network error or a 5XX error from the server.\r\n   *\r\n   * @default 2\r\n   */\r\n  maxRetries?: number;\r\n\r\n  /**\r\n   * Default headers to include with every request to the API.\r\n   *\r\n   * These can be removed in individual requests by explicitly setting the\r\n   * header to `undefined` or `null` in request options.\r\n   */\r\n  defaultHeaders?: Core.Headers;\r\n\r\n  /**\r\n   * Default query parameters to include with every request to the API.\r\n   *\r\n   * These can be removed in individual requests by explicitly setting the\r\n   * param to `undefined` in request options.\r\n   */\r\n  defaultQuery?: Core.DefaultQuery;\r\n\r\n  /**\r\n   * By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n   * Only set this option to `true` if you understand the risks and have appropriate mitigations in place.\r\n   */\r\n  dangerouslyAllowBrowser?: boolean;\r\n}\r\n\r\n/** API Client for interfacing with the Groq API. */\r\nexport class Groq extends Core.APIClient {\r\n  apiKey: string;\r\n\r\n  private _options: ClientOptions;\r\n\r\n  /**\r\n   * API Client for interfacing with the Groq API.\r\n   *\r\n   * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]\r\n   * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.\r\n   * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\r\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\r\n   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\r\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\r\n   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\r\n   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\r\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n   */\r\n  constructor({\r\n    baseURL = Core.readEnv('GROQ_BASE_URL'),\r\n    apiKey = Core.readEnv('GROQ_API_KEY'),\r\n    ...opts\r\n  }: ClientOptions = {}) {\r\n    if (apiKey === undefined) {\r\n      throw new Errors.GroqError(\r\n        \"The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).\",\r\n      );\r\n    }\r\n\r\n    const options: ClientOptions = {\r\n      apiKey,\r\n      ...opts,\r\n      baseURL: baseURL || `https://api.groq.com`,\r\n    };\r\n\r\n    if (!options.dangerouslyAllowBrowser && Core.isRunningInBrowser()) {\r\n      throw new Errors.GroqError(\r\n        \"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew Groq({ apiKey, dangerouslyAllowBrowser: true })\",\r\n      );\r\n    }\r\n\r\n    super({\r\n      baseURL: options.baseURL!,\r\n      timeout: options.timeout ?? 60000 /* 1 minute */,\r\n      httpAgent: options.httpAgent,\r\n      maxRetries: options.maxRetries,\r\n      fetch: options.fetch,\r\n    });\r\n    this._options = options;\r\n\r\n    this.apiKey = apiKey;\r\n  }\r\n\r\n  completions: API.Completions = new API.Completions(this);\r\n  chat: API.Chat = new API.Chat(this);\r\n  embeddings: API.Embeddings = new API.Embeddings(this);\r\n  audio: API.Audio = new API.Audio(this);\r\n  models: API.Models = new API.Models(this);\r\n\r\n  protected override defaultQuery(): Core.DefaultQuery | undefined {\r\n    return this._options.defaultQuery;\r\n  }\r\n\r\n  protected override defaultHeaders(opts: Core.FinalRequestOptions): Core.Headers {\r\n    return {\r\n      ...super.defaultHeaders(opts),\r\n      ...this._options.defaultHeaders,\r\n    };\r\n  }\r\n\r\n  protected override authHeaders(opts: Core.FinalRequestOptions): Core.Headers {\r\n    return { Authorization: `Bearer ${this.apiKey}` };\r\n  }\r\n\r\n  static Groq = this;\r\n\r\n  static GroqError = Errors.GroqError;\r\n  static APIError = Errors.APIError;\r\n  static APIConnectionError = Errors.APIConnectionError;\r\n  static APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;\r\n  static APIUserAbortError = Errors.APIUserAbortError;\r\n  static NotFoundError = Errors.NotFoundError;\r\n  static ConflictError = Errors.ConflictError;\r\n  static RateLimitError = Errors.RateLimitError;\r\n  static BadRequestError = Errors.BadRequestError;\r\n  static AuthenticationError = Errors.AuthenticationError;\r\n  static InternalServerError = Errors.InternalServerError;\r\n  static PermissionDeniedError = Errors.PermissionDeniedError;\r\n  static UnprocessableEntityError = Errors.UnprocessableEntityError;\r\n\r\n  static toFile = Uploads.toFile;\r\n  static fileFromPath = Uploads.fileFromPath;\r\n}\r\n\r\nexport const {\r\n  GroqError,\r\n  APIError,\r\n  APIConnectionError,\r\n  APIConnectionTimeoutError,\r\n  APIUserAbortError,\r\n  NotFoundError,\r\n  ConflictError,\r\n  RateLimitError,\r\n  BadRequestError,\r\n  AuthenticationError,\r\n  InternalServerError,\r\n  PermissionDeniedError,\r\n  UnprocessableEntityError,\r\n} = Errors;\r\n\r\nexport import toFile = Uploads.toFile;\r\nexport import fileFromPath = Uploads.fileFromPath;\r\n\r\nexport namespace Groq {\r\n  export import RequestOptions = Core.RequestOptions;\r\n\r\n  export import Completions = API.Completions;\r\n  export import CompletionUsage = API.CompletionUsage;\r\n\r\n  export import Chat = API.Chat;\r\n\r\n  export import Embeddings = API.Embeddings;\r\n  export import CreateEmbeddingResponse = API.CreateEmbeddingResponse;\r\n  export import Embedding = API.Embedding;\r\n  export import EmbeddingCreateParams = API.EmbeddingCreateParams;\r\n\r\n  export import Audio = API.Audio;\r\n\r\n  export import Models = API.Models;\r\n  export import Model = API.Model;\r\n  export import ModelDeleted = API.ModelDeleted;\r\n  export import ModelListResponse = API.ModelListResponse;\r\n\r\n  export import ErrorObject = API.ErrorObject;\r\n  export import FunctionDefinition = API.FunctionDefinition;\r\n  export import FunctionParameters = API.FunctionParameters;\r\n}\r\n\r\nexport default Groq;\r\n", "import { OutputParserException } from \"../base.js\";\r\nimport { parsePartialJson } from \"../json.js\";\r\nimport { BaseCumulativeTransformOutputParser, } from \"../transform.js\";\r\nimport { isAIMessage } from \"../../messages/ai.js\";\r\nexport function parseToolCall(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nrawToolCall, options) {\r\n    if (rawToolCall.function === undefined) {\r\n        return undefined;\r\n    }\r\n    let functionArgs;\r\n    if (options?.partial) {\r\n        try {\r\n            functionArgs = parsePartialJson(rawToolCall.function.arguments ?? \"{}\");\r\n        }\r\n        catch (e) {\r\n            return undefined;\r\n        }\r\n    }\r\n    else {\r\n        try {\r\n            functionArgs = JSON.parse(rawToolCall.function.arguments);\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        }\r\n        catch (e) {\r\n            throw new OutputParserException([\r\n                `Function \"${rawToolCall.function.name}\" arguments:`,\r\n                ``,\r\n                rawToolCall.function.arguments,\r\n                ``,\r\n                `are not valid JSON.`,\r\n                `Error: ${e.message}`,\r\n            ].join(\"\\n\"));\r\n        }\r\n    }\r\n    const parsedToolCall = {\r\n        name: rawToolCall.function.name,\r\n        args: functionArgs,\r\n        type: \"tool_call\",\r\n    };\r\n    if (options?.returnId) {\r\n        parsedToolCall.id = rawToolCall.id;\r\n    }\r\n    return parsedToolCall;\r\n}\r\nexport function convertLangChainToolCallToOpenAI(toolCall) {\r\n    if (toolCall.id === undefined) {\r\n        throw new Error(`All OpenAI tool calls must have an \"id\" field.`);\r\n    }\r\n    return {\r\n        id: toolCall.id,\r\n        type: \"function\",\r\n        function: {\r\n            name: toolCall.name,\r\n            arguments: JSON.stringify(toolCall.args),\r\n        },\r\n    };\r\n}\r\nexport function makeInvalidToolCall(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nrawToolCall, errorMsg) {\r\n    return {\r\n        name: rawToolCall.function?.name,\r\n        args: rawToolCall.function?.arguments,\r\n        id: rawToolCall.id,\r\n        error: errorMsg,\r\n        type: \"invalid_tool_call\",\r\n    };\r\n}\r\n/**\r\n * Class for parsing the output of a tool-calling LLM into a JSON object.\r\n */\r\nexport class JsonOutputToolsParser extends BaseCumulativeTransformOutputParser {\r\n    static lc_name() {\r\n        return \"JsonOutputToolsParser\";\r\n    }\r\n    constructor(fields) {\r\n        super(fields);\r\n        Object.defineProperty(this, \"returnId\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\r\n        });\r\n        Object.defineProperty(this, \"lc_serializable\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n        this.returnId = fields?.returnId ?? this.returnId;\r\n    }\r\n    _diff() {\r\n        throw new Error(\"Not supported.\");\r\n    }\r\n    async parse() {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    async parseResult(generations) {\r\n        const result = await this.parsePartialResult(generations, false);\r\n        return result;\r\n    }\r\n    /**\r\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\r\n     * only the arguments of the function call are returned.\r\n     * @param generations The output of the LLM to parse.\r\n     * @returns A JSON object representation of the function call or its arguments.\r\n     */\r\n    async parsePartialResult(generations, partial = true\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    ) {\r\n        const message = generations[0].message;\r\n        let toolCalls;\r\n        if (isAIMessage(message) && message.tool_calls?.length) {\r\n            toolCalls = message.tool_calls.map((toolCall) => {\r\n                const { id, ...rest } = toolCall;\r\n                if (!this.returnId) {\r\n                    return rest;\r\n                }\r\n                return {\r\n                    id,\r\n                    ...rest,\r\n                };\r\n            });\r\n        }\r\n        else if (message.additional_kwargs.tool_calls !== undefined) {\r\n            const rawToolCalls = JSON.parse(JSON.stringify(message.additional_kwargs.tool_calls));\r\n            toolCalls = rawToolCalls.map((rawToolCall) => {\r\n                return parseToolCall(rawToolCall, { returnId: this.returnId, partial });\r\n            });\r\n        }\r\n        if (!toolCalls) {\r\n            return [];\r\n        }\r\n        const parsedToolCalls = [];\r\n        for (const toolCall of toolCalls) {\r\n            if (toolCall !== undefined) {\r\n                const backwardsCompatibleToolCall = {\r\n                    type: toolCall.name,\r\n                    args: toolCall.args,\r\n                    id: toolCall.id,\r\n                };\r\n                parsedToolCalls.push(backwardsCompatibleToolCall);\r\n            }\r\n        }\r\n        return parsedToolCalls;\r\n    }\r\n}\r\n/**\r\n * Class for parsing the output of a tool-calling LLM into a JSON object if you are\r\n * expecting only a single tool to be called.\r\n */\r\nexport class JsonOutputKeyToolsParser extends JsonOutputToolsParser {\r\n    static lc_name() {\r\n        return \"JsonOutputKeyToolsParser\";\r\n    }\r\n    constructor(params) {\r\n        super(params);\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"output_parsers\", \"openai_tools\"]\r\n        });\r\n        Object.defineProperty(this, \"lc_serializable\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n        Object.defineProperty(this, \"returnId\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        /** The type of tool calls to return. */\r\n        Object.defineProperty(this, \"keyName\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        /** Whether to return only the first tool call. */\r\n        Object.defineProperty(this, \"returnSingle\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"zodSchema\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        this.keyName = params.keyName;\r\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\r\n        this.zodSchema = params.zodSchema;\r\n    }\r\n    async _validateResult(result) {\r\n        if (this.zodSchema === undefined) {\r\n            return result;\r\n        }\r\n        const zodParsedResult = await this.zodSchema.safeParseAsync(result);\r\n        if (zodParsedResult.success) {\r\n            return zodParsedResult.data;\r\n        }\r\n        else {\r\n            throw new OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error.errors)}`, JSON.stringify(result, null, 2));\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    async parsePartialResult(generations) {\r\n        const results = await super.parsePartialResult(generations);\r\n        const matchingResults = results.filter((result) => result.type === this.keyName);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let returnedValues = matchingResults;\r\n        if (!matchingResults.length) {\r\n            return undefined;\r\n        }\r\n        if (!this.returnId) {\r\n            returnedValues = matchingResults.map((result) => result.args);\r\n        }\r\n        if (this.returnSingle) {\r\n            return returnedValues[0];\r\n        }\r\n        return returnedValues;\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    async parseResult(generations) {\r\n        const results = await super.parsePartialResult(generations, false);\r\n        const matchingResults = results.filter((result) => result.type === this.keyName);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let returnedValues = matchingResults;\r\n        if (!matchingResults.length) {\r\n            return undefined;\r\n        }\r\n        if (!this.returnId) {\r\n            returnedValues = matchingResults.map((result) => result.args);\r\n        }\r\n        if (this.returnSingle) {\r\n            return this._validateResult(returnedValues[0]);\r\n        }\r\n        const toolCallResults = await Promise.all(returnedValues.map((value) => this._validateResult(value)));\r\n        return toolCallResults;\r\n    }\r\n}\r\n", "import { zodToJsonSchema } from \"zod-to-json-schema\";\r\nimport { Runnable } from \"../runnables/base.js\";\r\nimport { isZodSchema } from \"./types/is_zod_schema.js\";\r\n/**\r\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\r\n * that is compatible with OpenAI function calling. It uses the `zodToJsonSchema`\r\n * function to convert the schema of the `StructuredTool` or `RunnableToolLike`\r\n * into a JSON schema, which is then used as the parameters for the OpenAI function.\r\n *\r\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\r\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\r\n */\r\nexport function convertToOpenAIFunction(tool, fields) {\r\n    // @TODO 0.3.0 Remove the `number` typing\r\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\r\n    return {\r\n        name: tool.name,\r\n        description: tool.description,\r\n        parameters: zodToJsonSchema(tool.schema),\r\n        // Do not include the `strict` field if it is `undefined`.\r\n        ...(fieldsCopy?.strict !== undefined ? { strict: fieldsCopy.strict } : {}),\r\n    };\r\n}\r\n/**\r\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\r\n * format that is compatible with OpenAI tool calling. It uses the\r\n * `zodToJsonSchema` function to convert the schema of the `StructuredTool`\r\n * or `RunnableToolLike` into a JSON schema, which is then used as the\r\n * parameters for the OpenAI tool.\r\n *\r\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\r\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\r\n */\r\nexport function convertToOpenAITool(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntool, fields) {\r\n    // @TODO 0.3.0 Remove the `number` typing\r\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\r\n    let toolDef;\r\n    if (isLangChainTool(tool)) {\r\n        toolDef = {\r\n            type: \"function\",\r\n            function: convertToOpenAIFunction(tool),\r\n        };\r\n    }\r\n    else {\r\n        toolDef = tool;\r\n    }\r\n    if (fieldsCopy?.strict !== undefined) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        toolDef.function.strict = fieldsCopy.strict;\r\n    }\r\n    return toolDef;\r\n}\r\n/**\r\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\r\n *\r\n * @param {StructuredToolInterface | Record<string, any> | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\r\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\r\n */\r\nexport function isStructuredTool(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ntool) {\r\n    return (tool !== undefined &&\r\n        Array.isArray(tool.lc_namespace));\r\n}\r\n/**\r\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\r\n *\r\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\r\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\r\n */\r\nexport function isRunnableToolLike(tool) {\r\n    return (tool !== undefined &&\r\n        Runnable.isRunnable(tool) &&\r\n        \"lc_name\" in tool.constructor &&\r\n        typeof tool.constructor.lc_name === \"function\" &&\r\n        tool.constructor.lc_name() === \"RunnableToolLike\");\r\n}\r\n/**\r\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\r\n *\r\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\r\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\r\n */\r\nexport function isStructuredToolParams(tool) {\r\n    return (!!tool &&\r\n        typeof tool === \"object\" &&\r\n        \"name\" in tool &&\r\n        \"schema\" in tool &&\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        isZodSchema(tool.schema));\r\n}\r\n/**\r\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\r\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\r\n * while still containing the necessary properties to be passed to a LLM for tool calling.\r\n *\r\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\r\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\r\n */\r\nexport function isLangChainTool(tool) {\r\n    return (isStructuredToolParams(tool) ||\r\n        isRunnableToolLike(tool) ||\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        isStructuredTool(tool));\r\n}\r\n", "import { zodToJsonSchema } from \"zod-to-json-schema\";\r\nimport { BaseChatModel, } from \"@langchain/core/language_models/chat_models\";\r\nimport { AIMessage, AIMessageChunk, ChatMessage, ChatMessageChunk, HumanMessageChunk, SystemMessageChunk, isAIMessage, } from \"@langchain/core/messages\";\r\nimport { ChatGenerationChunk, } from \"@langchain/core/outputs\";\r\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\r\nimport { isZodSchema } from \"@langchain/core/utils/types\";\r\nimport Groq from \"groq-sdk\";\r\nimport { RunnablePassthrough, RunnableSequence, } from \"@langchain/core/runnables\";\r\nimport { JsonOutputParser, StructuredOutputParser, } from \"@langchain/core/output_parsers\";\r\nimport { JsonOutputKeyToolsParser, parseToolCall, makeInvalidToolCall, convertLangChainToolCallToOpenAI, } from \"@langchain/core/output_parsers/openai_tools\";\r\nimport { convertToOpenAITool } from \"@langchain/core/utils/function_calling\";\r\nexport function messageToGroqRole(message) {\r\n    const type = message._getType();\r\n    switch (type) {\r\n        case \"system\":\r\n            return \"system\";\r\n        case \"ai\":\r\n            return \"assistant\";\r\n        case \"human\":\r\n            return \"user\";\r\n        case \"function\":\r\n            return \"function\";\r\n        case \"tool\":\r\n            // Not yet supported as a type\r\n            return \"tool\";\r\n        default:\r\n            throw new Error(`Unknown message type: ${type}`);\r\n    }\r\n}\r\nfunction convertMessagesToGroqParams(messages) {\r\n    return messages.map((message) => {\r\n        if (typeof message.content !== \"string\") {\r\n            throw new Error(\"Non string message content not supported\");\r\n        }\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const completionParam = {\r\n            role: messageToGroqRole(message),\r\n            content: message.content,\r\n            name: message.name,\r\n            function_call: message.additional_kwargs.function_call,\r\n            tool_calls: message.additional_kwargs.tool_calls,\r\n            tool_call_id: message.tool_call_id,\r\n        };\r\n        if (isAIMessage(message) && !!message.tool_calls?.length) {\r\n            completionParam.tool_calls = message.tool_calls.map(convertLangChainToolCallToOpenAI);\r\n        }\r\n        else {\r\n            if (message.additional_kwargs.tool_calls != null) {\r\n                completionParam.tool_calls = message.additional_kwargs.tool_calls;\r\n            }\r\n            if (message.tool_call_id != null) {\r\n                completionParam.tool_call_id = message.tool_call_id;\r\n            }\r\n        }\r\n        return completionParam;\r\n    });\r\n}\r\nfunction groqResponseToChatMessage(message, usageMetadata) {\r\n    const rawToolCalls = message.tool_calls;\r\n    switch (message.role) {\r\n        case \"assistant\": {\r\n            const toolCalls = [];\r\n            const invalidToolCalls = [];\r\n            for (const rawToolCall of rawToolCalls ?? []) {\r\n                try {\r\n                    toolCalls.push(parseToolCall(rawToolCall, { returnId: true }));\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                }\r\n                catch (e) {\r\n                    invalidToolCalls.push(makeInvalidToolCall(rawToolCall, e.message));\r\n                }\r\n            }\r\n            return new AIMessage({\r\n                content: message.content || \"\",\r\n                additional_kwargs: { tool_calls: rawToolCalls },\r\n                tool_calls: toolCalls,\r\n                invalid_tool_calls: invalidToolCalls,\r\n                usage_metadata: usageMetadata,\r\n            });\r\n        }\r\n        default:\r\n            return new ChatMessage(message.content || \"\", message.role ?? \"unknown\");\r\n    }\r\n}\r\nfunction _convertDeltaToolCallToToolCallChunk(toolCalls, index) {\r\n    if (!toolCalls?.length)\r\n        return undefined;\r\n    return toolCalls.map((tc) => ({\r\n        id: tc.id,\r\n        name: tc.function?.name,\r\n        args: tc.function?.arguments,\r\n        type: \"tool_call_chunk\",\r\n        index,\r\n    }));\r\n}\r\nfunction _convertDeltaToMessageChunk(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\ndelta, index, xGroq) {\r\n    const { role } = delta;\r\n    const content = delta.content ?? \"\";\r\n    let additional_kwargs;\r\n    if (delta.function_call) {\r\n        additional_kwargs = {\r\n            function_call: delta.function_call,\r\n        };\r\n    }\r\n    else if (delta.tool_calls) {\r\n        additional_kwargs = {\r\n            tool_calls: delta.tool_calls,\r\n        };\r\n    }\r\n    else {\r\n        additional_kwargs = {};\r\n    }\r\n    let usageMetadata;\r\n    let groqMessageId;\r\n    if (xGroq?.usage) {\r\n        usageMetadata = {\r\n            input_tokens: xGroq.usage.prompt_tokens,\r\n            output_tokens: xGroq.usage.completion_tokens,\r\n            total_tokens: xGroq.usage.total_tokens,\r\n        };\r\n        groqMessageId = xGroq.id;\r\n    }\r\n    if (role === \"user\") {\r\n        return {\r\n            message: new HumanMessageChunk({ content }),\r\n        };\r\n    }\r\n    else if (role === \"assistant\") {\r\n        const toolCallChunks = _convertDeltaToolCallToToolCallChunk(delta.tool_calls, index);\r\n        return {\r\n            message: new AIMessageChunk({\r\n                content,\r\n                additional_kwargs,\r\n                tool_call_chunks: toolCallChunks\r\n                    ? toolCallChunks.map((tc) => ({\r\n                        type: tc.type,\r\n                        args: tc.args,\r\n                        index: tc.index,\r\n                    }))\r\n                    : undefined,\r\n                usage_metadata: usageMetadata,\r\n                id: groqMessageId,\r\n            }),\r\n            toolCallData: toolCallChunks\r\n                ? toolCallChunks.map((tc) => ({\r\n                    id: tc.id ?? \"\",\r\n                    name: tc.name ?? \"\",\r\n                    index: tc.index ?? index,\r\n                    type: \"tool_call_chunk\",\r\n                }))\r\n                : undefined,\r\n        };\r\n    }\r\n    else if (role === \"system\") {\r\n        return {\r\n            message: new SystemMessageChunk({ content }),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            message: new ChatMessageChunk({ content, role }),\r\n        };\r\n    }\r\n}\r\n/**\r\n * Groq chat model integration.\r\n *\r\n * The Groq API is compatible to the OpenAI API with some limitations. View the\r\n * full API ref at:\r\n * @link {https://docs.api.groq.com/md/openai.oas.html}\r\n *\r\n * Setup:\r\n * Install `@langchain/groq` and set an environment variable named `GROQ_API_KEY`.\r\n *\r\n * ```bash\r\n * npm install @langchain/groq\r\n * export GROQ_API_KEY=\"your-api-key\"\r\n * ```\r\n *\r\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_groq.ChatGroq.html#constructor)\r\n *\r\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_groq.ChatGroqCallOptions.html)\r\n *\r\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\r\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\r\n *\r\n * ```typescript\r\n * // When calling `.bind`, call options should be passed via the first argument\r\n * const llmWithArgsBound = llm.bind({\r\n *   stop: [\"\\n\"],\r\n *   tools: [...],\r\n * });\r\n *\r\n * // When calling `.bindTools`, call options should be passed via the second argument\r\n * const llmWithTools = llm.bindTools(\r\n *   [...],\r\n *   {\r\n *     tool_choice: \"auto\",\r\n *   }\r\n * );\r\n * ```\r\n *\r\n * ## Examples\r\n *\r\n * <details open>\r\n * <summary><strong>Instantiate</strong></summary>\r\n *\r\n * ```typescript\r\n * import { ChatGroq } from '@langchain/groq';\r\n *\r\n * const llm = new ChatGroq({\r\n *   model: \"mixtral-8x7b-32768\",\r\n *   temperature: 0,\r\n *   // other params...\r\n * });\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n *\r\n * <details>\r\n * <summary><strong>Invoking</strong></summary>\r\n *\r\n * ```typescript\r\n * const input = `Translate \"I love programming\" into French.`;\r\n *\r\n * // Models also accept a list of chat messages or a formatted prompt\r\n * const result = await llm.invoke(input);\r\n * console.log(result);\r\n * ```\r\n *\r\n * ```txt\r\n * AIMessage {\r\n *   \"content\": \"The French translation of \\\"I love programming\\\" is \\\"J'aime programmer\\\". In this sentence, \\\"J'aime\\\" is the first person singular conjugation of the French verb \\\"aimer\\\" which means \\\"to love\\\", and \\\"programmer\\\" is the French infinitive for \\\"to program\\\". I hope this helps! Let me know if you have any other questions.\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"tokenUsage\": {\r\n *       \"completionTokens\": 82,\r\n *       \"promptTokens\": 20,\r\n *       \"totalTokens\": 102\r\n *     },\r\n *     \"finish_reason\": \"stop\"\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n *\r\n * <details>\r\n * <summary><strong>Streaming Chunks</strong></summary>\r\n *\r\n * ```typescript\r\n * for await (const chunk of await llm.stream(input)) {\r\n *   console.log(chunk);\r\n * }\r\n * ```\r\n *\r\n * ```txt\r\n * AIMessageChunk {\r\n *   \"content\": \"\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \"The\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \" French\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \" translation\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \" of\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \" \\\"\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \"I\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \" love\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * ...\r\n * AIMessageChunk {\r\n *   \"content\": \".\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": null\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * AIMessageChunk {\r\n *   \"content\": \"\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": \"stop\"\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n *\r\n * <details>\r\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\r\n *\r\n * ```typescript\r\n * import { AIMessageChunk } from '@langchain/core/messages';\r\n * import { concat } from '@langchain/core/utils/stream';\r\n *\r\n * const stream = await llm.stream(input);\r\n * let full: AIMessageChunk | undefined;\r\n * for await (const chunk of stream) {\r\n *   full = !full ? chunk : concat(full, chunk);\r\n * }\r\n * console.log(full);\r\n * ```\r\n *\r\n * ```txt\r\n * AIMessageChunk {\r\n *   \"content\": \"The French translation of \\\"I love programming\\\" is \\\"J'aime programmer\\\". In this sentence, \\\"J'aime\\\" is the first person singular conjugation of the French verb \\\"aimer\\\" which means \\\"to love\\\", and \\\"programmer\\\" is the French infinitive for \\\"to program\\\". I hope this helps! Let me know if you have any other questions.\",\r\n *   \"additional_kwargs\": {},\r\n *   \"response_metadata\": {\r\n *     \"finishReason\": \"stop\"\r\n *   },\r\n *   \"tool_calls\": [],\r\n *   \"tool_call_chunks\": [],\r\n *   \"invalid_tool_calls\": []\r\n * }\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n *\r\n * <details>\r\n * <summary><strong>Bind tools</strong></summary>\r\n *\r\n * ```typescript\r\n * import { z } from 'zod';\r\n *\r\n * const llmForToolCalling = new ChatGroq({\r\n *   model: \"llama3-groq-70b-8192-tool-use-preview\",\r\n *   temperature: 0,\r\n *   // other params...\r\n * });\r\n *\r\n * const GetWeather = {\r\n *   name: \"GetWeather\",\r\n *   description: \"Get the current weather in a given location\",\r\n *   schema: z.object({\r\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\r\n *   }),\r\n * }\r\n *\r\n * const GetPopulation = {\r\n *   name: \"GetPopulation\",\r\n *   description: \"Get the current population in a given location\",\r\n *   schema: z.object({\r\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\r\n *   }),\r\n * }\r\n *\r\n * const llmWithTools = llmForToolCalling.bindTools([GetWeather, GetPopulation]);\r\n * const aiMsg = await llmWithTools.invoke(\r\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\r\n * );\r\n * console.log(aiMsg.tool_calls);\r\n * ```\r\n *\r\n * ```txt\r\n * [\r\n *   {\r\n *     name: 'GetWeather',\r\n *     args: { location: 'Los Angeles, CA' },\r\n *     type: 'tool_call',\r\n *     id: 'call_cd34'\r\n *   },\r\n *   {\r\n *     name: 'GetWeather',\r\n *     args: { location: 'New York, NY' },\r\n *     type: 'tool_call',\r\n *     id: 'call_68rf'\r\n *   },\r\n *   {\r\n *     name: 'GetPopulation',\r\n *     args: { location: 'Los Angeles, CA' },\r\n *     type: 'tool_call',\r\n *     id: 'call_f81z'\r\n *   },\r\n *   {\r\n *     name: 'GetPopulation',\r\n *     args: { location: 'New York, NY' },\r\n *     type: 'tool_call',\r\n *     id: 'call_8byt'\r\n *   }\r\n * ]\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n *\r\n * <details>\r\n * <summary><strong>Structured Output</strong></summary>\r\n *\r\n * ```typescript\r\n * import { z } from 'zod';\r\n *\r\n * const Joke = z.object({\r\n *   setup: z.string().describe(\"The setup of the joke\"),\r\n *   punchline: z.string().describe(\"The punchline to the joke\"),\r\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\r\n * }).describe('Joke to tell user.');\r\n *\r\n * const structuredLlm = llmForToolCalling.withStructuredOutput(Joke, { name: \"Joke\" });\r\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\r\n * console.log(jokeResult);\r\n * ```\r\n *\r\n * ```txt\r\n * {\r\n *   setup: \"Why don't cats play poker in the wild?\",\r\n *   punchline: 'Because there are too many cheetahs.'\r\n * }\r\n * ```\r\n * </details>\r\n *\r\n * <br />\r\n */\r\nexport class ChatGroq extends BaseChatModel {\r\n    static lc_name() {\r\n        return \"ChatGroq\";\r\n    }\r\n    _llmType() {\r\n        return \"groq\";\r\n    }\r\n    get lc_secrets() {\r\n        return {\r\n            apiKey: \"GROQ_API_KEY\",\r\n        };\r\n    }\r\n    constructor(fields) {\r\n        super(fields ?? {});\r\n        Object.defineProperty(this, \"lc_namespace\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"langchain\", \"chat_models\", \"groq\"]\r\n        });\r\n        Object.defineProperty(this, \"client\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"modelName\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"mixtral-8x7b-32768\"\r\n        });\r\n        Object.defineProperty(this, \"model\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"mixtral-8x7b-32768\"\r\n        });\r\n        Object.defineProperty(this, \"temperature\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0.7\r\n        });\r\n        Object.defineProperty(this, \"stop\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"stopSequences\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"maxTokens\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"streaming\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"apiKey\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"lc_serializable\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: true\r\n        });\r\n        const apiKey = fields?.apiKey || getEnvironmentVariable(\"GROQ_API_KEY\");\r\n        if (!apiKey) {\r\n            throw new Error(`Groq API key not found. Please set the GROQ_API_KEY environment variable or provide the key into \"apiKey\"`);\r\n        }\r\n        this.client = new Groq({\r\n            apiKey,\r\n            dangerouslyAllowBrowser: true,\r\n        });\r\n        this.apiKey = apiKey;\r\n        this.temperature = fields?.temperature ?? this.temperature;\r\n        this.modelName = fields?.model ?? fields?.modelName ?? this.model;\r\n        this.model = this.modelName;\r\n        this.streaming = fields?.streaming ?? this.streaming;\r\n        this.stop =\r\n            fields?.stopSequences ??\r\n                (typeof fields?.stop === \"string\" ? [fields.stop] : fields?.stop) ??\r\n                [];\r\n        this.stopSequences = this.stop;\r\n        this.maxTokens = fields?.maxTokens;\r\n    }\r\n    getLsParams(options) {\r\n        const params = this.invocationParams(options);\r\n        return {\r\n            ls_provider: \"groq\",\r\n            ls_model_name: this.model,\r\n            ls_model_type: \"chat\",\r\n            ls_temperature: params.temperature ?? this.temperature,\r\n            ls_max_tokens: params.max_tokens ?? this.maxTokens,\r\n            ls_stop: options.stop,\r\n        };\r\n    }\r\n    async completionWithRetry(request, options) {\r\n        return this.caller.call(async () => this.client.chat.completions.create(request, options));\r\n    }\r\n    invocationParams(options) {\r\n        const params = super.invocationParams(options);\r\n        if (options.tool_choice !== undefined) {\r\n            params.tool_choice = options.tool_choice;\r\n        }\r\n        if (options.tools !== undefined) {\r\n            params.tools = options.tools;\r\n        }\r\n        if (options.response_format !== undefined) {\r\n            params.response_format = options.response_format;\r\n        }\r\n        return {\r\n            ...params,\r\n            stop: options.stop ?? this.stopSequences,\r\n            model: this.model,\r\n            temperature: this.temperature,\r\n            max_tokens: this.maxTokens,\r\n        };\r\n    }\r\n    bindTools(tools, kwargs) {\r\n        return this.bind({\r\n            tools: tools.map((tool) => convertToOpenAITool(tool)),\r\n            ...kwargs,\r\n        });\r\n    }\r\n    async *_streamResponseChunks(messages, options, runManager) {\r\n        const params = this.invocationParams(options);\r\n        const messagesMapped = convertMessagesToGroqParams(messages);\r\n        const response = await this.completionWithRetry({\r\n            ...params,\r\n            messages: messagesMapped,\r\n            stream: true,\r\n        }, {\r\n            signal: options?.signal,\r\n            headers: options?.headers,\r\n        });\r\n        let role = \"\";\r\n        const toolCall = [];\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let responseMetadata;\r\n        for await (const data of response) {\r\n            responseMetadata = data;\r\n            const choice = data?.choices[0];\r\n            if (!choice) {\r\n                continue;\r\n            }\r\n            // The `role` field is populated in the first delta of the response\r\n            // but is not present in subsequent deltas. Extract it when available.\r\n            if (choice.delta?.role) {\r\n                role = choice.delta.role;\r\n            }\r\n            const { message, toolCallData } = _convertDeltaToMessageChunk({\r\n                ...choice.delta,\r\n                role,\r\n            } ?? {}, choice.index, data.x_groq);\r\n            if (toolCallData) {\r\n                // First, ensure the ID is not already present in toolCall\r\n                const newToolCallData = toolCallData.filter((tc) => toolCall.every((t) => t.id !== tc.id));\r\n                toolCall.push(...newToolCallData);\r\n                // Yield here, ensuring the ID and name fields are only yielded once.\r\n                yield new ChatGenerationChunk({\r\n                    message: new AIMessageChunk({\r\n                        content: \"\",\r\n                        tool_call_chunks: newToolCallData,\r\n                    }),\r\n                    text: \"\",\r\n                });\r\n            }\r\n            const chunk = new ChatGenerationChunk({\r\n                message,\r\n                text: choice.delta.content ?? \"\",\r\n                generationInfo: {\r\n                    finishReason: choice.finish_reason,\r\n                },\r\n            });\r\n            yield chunk;\r\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\r\n        }\r\n        if (responseMetadata) {\r\n            if (\"choices\" in responseMetadata) {\r\n                delete responseMetadata.choices;\r\n            }\r\n            yield new ChatGenerationChunk({\r\n                message: new AIMessageChunk({\r\n                    content: \"\",\r\n                    response_metadata: responseMetadata,\r\n                }),\r\n                text: \"\",\r\n            });\r\n        }\r\n        if (options.signal?.aborted) {\r\n            throw new Error(\"AbortError\");\r\n        }\r\n    }\r\n    async _generate(messages, options, runManager) {\r\n        if (this.streaming) {\r\n            const tokenUsage = {};\r\n            const stream = this._streamResponseChunks(messages, options, runManager);\r\n            const finalChunks = {};\r\n            for await (const chunk of stream) {\r\n                const index = chunk.generationInfo?.completion ?? 0;\r\n                if (finalChunks[index] === undefined) {\r\n                    finalChunks[index] = chunk;\r\n                }\r\n                else {\r\n                    finalChunks[index] = finalChunks[index].concat(chunk);\r\n                }\r\n            }\r\n            const generations = Object.entries(finalChunks)\r\n                .sort(([aKey], [bKey]) => parseInt(aKey, 10) - parseInt(bKey, 10))\r\n                .map(([_, value]) => value);\r\n            return { generations, llmOutput: { estimatedTokenUsage: tokenUsage } };\r\n        }\r\n        else {\r\n            return this._generateNonStreaming(messages, options, runManager);\r\n        }\r\n    }\r\n    async _generateNonStreaming(messages, options, _runManager) {\r\n        const tokenUsage = {};\r\n        const params = this.invocationParams(options);\r\n        const messagesMapped = convertMessagesToGroqParams(messages);\r\n        const data = await this.completionWithRetry({\r\n            ...params,\r\n            stream: false,\r\n            messages: messagesMapped,\r\n        }, {\r\n            signal: options?.signal,\r\n            headers: options?.headers,\r\n        });\r\n        if (\"usage\" in data && data.usage) {\r\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data.usage;\r\n            if (completionTokens) {\r\n                tokenUsage.completionTokens =\r\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\r\n            }\r\n            if (promptTokens) {\r\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\r\n            }\r\n            if (totalTokens) {\r\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\r\n            }\r\n        }\r\n        const generations = [];\r\n        if (\"choices\" in data && data.choices) {\r\n            for (const part of data.choices) {\r\n                const text = part.message?.content ?? \"\";\r\n                let usageMetadata;\r\n                if (tokenUsage.totalTokens !== undefined) {\r\n                    usageMetadata = {\r\n                        input_tokens: tokenUsage.promptTokens ?? 0,\r\n                        output_tokens: tokenUsage.completionTokens ?? 0,\r\n                        total_tokens: tokenUsage.totalTokens,\r\n                    };\r\n                }\r\n                const generation = {\r\n                    text,\r\n                    message: groqResponseToChatMessage(part.message ?? { role: \"assistant\" }, usageMetadata),\r\n                };\r\n                generation.generationInfo = {\r\n                    ...(part.finish_reason ? { finish_reason: part.finish_reason } : {}),\r\n                    ...(part.logprobs ? { logprobs: part.logprobs } : {}),\r\n                };\r\n                generations.push(generation);\r\n            }\r\n        }\r\n        return {\r\n            generations,\r\n            llmOutput: { tokenUsage },\r\n        };\r\n    }\r\n    withStructuredOutput(outputSchema, config) {\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        const schema = outputSchema;\r\n        const name = config?.name;\r\n        const method = config?.method;\r\n        const includeRaw = config?.includeRaw;\r\n        let functionName = name ?? \"extract\";\r\n        let outputParser;\r\n        let llm;\r\n        if (method === \"jsonMode\") {\r\n            llm = this.bind({\r\n                response_format: { type: \"json_object\" },\r\n            });\r\n            if (isZodSchema(schema)) {\r\n                outputParser = StructuredOutputParser.fromZodSchema(schema);\r\n            }\r\n            else {\r\n                outputParser = new JsonOutputParser();\r\n            }\r\n        }\r\n        else {\r\n            if (isZodSchema(schema)) {\r\n                const asJsonSchema = zodToJsonSchema(schema);\r\n                llm = this.bind({\r\n                    tools: [\r\n                        {\r\n                            type: \"function\",\r\n                            function: {\r\n                                name: functionName,\r\n                                description: asJsonSchema.description,\r\n                                parameters: asJsonSchema,\r\n                            },\r\n                        },\r\n                    ],\r\n                    tool_choice: {\r\n                        type: \"function\",\r\n                        function: {\r\n                            name: functionName,\r\n                        },\r\n                    },\r\n                });\r\n                outputParser = new JsonOutputKeyToolsParser({\r\n                    returnSingle: true,\r\n                    keyName: functionName,\r\n                    zodSchema: schema,\r\n                });\r\n            }\r\n            else {\r\n                let openAIFunctionDefinition;\r\n                if (typeof schema.name === \"string\" &&\r\n                    typeof schema.parameters === \"object\" &&\r\n                    schema.parameters != null) {\r\n                    openAIFunctionDefinition = schema;\r\n                    functionName = schema.name;\r\n                }\r\n                else {\r\n                    functionName = schema.title ?? functionName;\r\n                    openAIFunctionDefinition = {\r\n                        name: functionName,\r\n                        description: schema.description ?? \"\",\r\n                        parameters: schema,\r\n                    };\r\n                }\r\n                llm = this.bind({\r\n                    tools: [\r\n                        {\r\n                            type: \"function\",\r\n                            function: openAIFunctionDefinition,\r\n                        },\r\n                    ],\r\n                    tool_choice: {\r\n                        type: \"function\",\r\n                        function: {\r\n                            name: functionName,\r\n                        },\r\n                    },\r\n                });\r\n                outputParser = new JsonOutputKeyToolsParser({\r\n                    returnSingle: true,\r\n                    keyName: functionName,\r\n                });\r\n            }\r\n        }\r\n        if (!includeRaw) {\r\n            return llm.pipe(outputParser).withConfig({\r\n                runName: \"ChatGroqStructuredOutput\",\r\n            });\r\n        }\r\n        const parserAssign = RunnablePassthrough.assign({\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            parsed: (input, config) => outputParser.invoke(input.raw, config),\r\n        });\r\n        const parserNone = RunnablePassthrough.assign({\r\n            parsed: () => null,\r\n        });\r\n        const parsedWithFallback = parserAssign.withFallbacks({\r\n            fallbacks: [parserNone],\r\n        });\r\n        return RunnableSequence.from([\r\n            {\r\n                raw: llm,\r\n            },\r\n            parsedWithFallback,\r\n        ]).withConfig({\r\n            runName: \"ChatGroqStructuredOutput\",\r\n        });\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["len", "i", "len2", "blocks", "__publicField", "base64", "__publicField", "cache", "_a", "_b", "cache", "config", "fetch", "Request", "Response", "Headers", "FormData", "Blob", "File", "ReadableStream", "ReadableStream", "_a", "File", "_a", "FormData", "fetch", "opts", "_a", "retryMessage", "_a", "_a", "_a", "Transcriptions", "Translations", "Audio", "Completions", "Chat", "Completions", "Embeddings", "Models", "Completions", "GroqError", "APIError", "APIConnectionError", "APIConnectionTimeoutError", "APIUserAbortError", "NotFoundError", "ConflictError", "RateLimitError", "BadRequestError", "AuthenticationError", "InternalServerError", "PermissionDeniedError", "UnprocessableEntityError", "Groq", "Completions", "_a", "_a", "config"]
}
